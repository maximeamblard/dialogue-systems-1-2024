{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../../common/Exports","loc":{"line":6,"column":24,"index":253},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js"},{"name":"./ConversationConnectionMessage","loc":{"line":7,"column":46,"index":324},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionMessage.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConversationWebsocketMessageFormatter = void 0;\nvar Exports_1 = require(\"../../common/Exports\");\nvar ConversationConnectionMessage_1 = require(\"./ConversationConnectionMessage\");\n/**\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\n */\nvar ConversationWebsocketMessageFormatter = /** @class */ (function () {\n    function ConversationWebsocketMessageFormatter() {\n    }\n    /**\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\n     */\n    ConversationWebsocketMessageFormatter.prototype.toConnectionMessage = function (message) {\n        var deferral = new Exports_1.Deferred();\n        try {\n            if (message.messageType === Exports_1.MessageType.Text) {\n                var incomingMessage = new ConversationConnectionMessage_1.ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\n                deferral.resolve(incomingMessage);\n            }\n            else if (message.messageType === Exports_1.MessageType.Binary) {\n                deferral.resolve(new ConversationConnectionMessage_1.ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\n            }\n        }\n        catch (e) {\n            deferral.reject(\"Error formatting the message. Error: \" + e);\n        }\n        return deferral.promise;\n    };\n    /**\n     * Format outgoing messages: text (commands or IM)\n     */\n    ConversationWebsocketMessageFormatter.prototype.fromConnectionMessage = function (message) {\n        var deferral = new Exports_1.Deferred();\n        try {\n            if (message.messageType === Exports_1.MessageType.Text) {\n                var payload = \"\" + (message.textBody ? message.textBody : \"\");\n                deferral.resolve(new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Text, payload, message.id));\n            }\n        }\n        catch (e) {\n            deferral.reject(\"Error formatting the message. \" + e);\n        }\n        return deferral.promise;\n    };\n    return ConversationWebsocketMessageFormatter;\n}());\nexports.ConversationWebsocketMessageFormatter = ConversationWebsocketMessageFormatter;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAElC,gDAM8B;AAC9B,iFAAgF;AAEhF;;GAEG;AACH;IAAA;IAwCA,CAAC;IAtCG;;OAEG;IACI,mEAAmB,GAA1B,UAA2B,OAA4B;QACnD,IAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAiC,CAAC;QAE/D,IAAI;YACA,IAAI,OAAO,CAAC,WAAW,KAAK,qBAAW,CAAC,IAAI,EAAE;gBAC1C,IAAM,eAAe,GAAkC,IAAI,6DAA6B,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;gBACnJ,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;aACrC;iBAAM,IAAI,OAAO,CAAC,WAAW,KAAK,qBAAW,CAAC,MAAM,EAAE;gBACnD,QAAQ,CAAC,OAAO,CAAC,IAAI,6DAA6B,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;aAC1H;SACJ;QAAC,OAAO,CAAC,EAAE;YACR,QAAQ,CAAC,MAAM,CAAC,0CAAwC,CAAa,CAAC,CAAC;SAC1E;QAED,OAAO,QAAQ,CAAC,OAAO,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,qEAAqB,GAA5B,UAA6B,OAA0B;QAEnD,IAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAuB,CAAC;QAErD,IAAI;YACA,IAAI,OAAO,CAAC,WAAW,KAAK,qBAAW,CAAC,IAAI,EAAE;gBAC1C,IAAM,OAAO,GAAG,MAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAE,CAAC;gBAC9D,QAAQ,CAAC,OAAO,CAAC,IAAI,6BAAmB,CAAC,qBAAW,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;aACpF;SACJ;QAAC,OAAO,CAAC,EAAE;YACR,QAAQ,CAAC,MAAM,CAAC,mCAAiC,CAAa,CAAC,CAAC;SACnE;QAED,OAAO,QAAQ,CAAC,OAAO,CAAC;IAC5B,CAAC;IACL,4CAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,sFAAqC","file":"ConversationWebsocketMessageFormatter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n"]}},"error":null,"hash":"41501034e5a77f06adbcfc1adf4bf1ee","cacheData":{"env":{}}}