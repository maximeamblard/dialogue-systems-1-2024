{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"./Error","loc":{"line":6,"column":22,"index":225},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js"},{"name":"./Guid","loc":{"line":7,"column":21,"index":258},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventSource = void 0;\nvar Error_1 = require(\"./Error\");\nvar Guid_1 = require(\"./Guid\");\nvar EventSource = /** @class */ (function () {\n    function EventSource(metadata) {\n        this.privEventListeners = {};\n        this.privIsDisposed = false;\n        this.privConsoleListener = undefined;\n        this.privMetadata = metadata;\n    }\n    EventSource.prototype.onEvent = function (event) {\n        if (this.isDisposed()) {\n            throw (new Error_1.ObjectDisposedError(\"EventSource\"));\n        }\n        if (this.metadata) {\n            for (var paramName in this.metadata) {\n                if (paramName) {\n                    if (event.metadata) {\n                        if (!event.metadata[paramName]) {\n                            event.metadata[paramName] = this.metadata[paramName];\n                        }\n                    }\n                }\n            }\n        }\n        for (var eventId in this.privEventListeners) {\n            if (eventId && this.privEventListeners[eventId]) {\n                this.privEventListeners[eventId](event);\n            }\n        }\n    };\n    EventSource.prototype.attach = function (onEventCallback) {\n        var _this = this;\n        var id = Guid_1.createNoDashGuid();\n        this.privEventListeners[id] = onEventCallback;\n        return {\n            detach: function () {\n                delete _this.privEventListeners[id];\n                return Promise.resolve();\n            },\n        };\n    };\n    EventSource.prototype.attachListener = function (listener) {\n        return this.attach(function (e) { return listener.onEvent(e); });\n    };\n    EventSource.prototype.attachConsoleListener = function (listener) {\n        if (!!this.privConsoleListener) {\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\n        }\n        this.privConsoleListener = this.attach(function (e) { return listener.onEvent(e); });\n        return this.privConsoleListener;\n    };\n    EventSource.prototype.isDisposed = function () {\n        return this.privIsDisposed;\n    };\n    EventSource.prototype.dispose = function () {\n        this.privEventListeners = null;\n        this.privIsDisposed = true;\n    };\n    Object.defineProperty(EventSource.prototype, \"metadata\", {\n        get: function () {\n            return this.privMetadata;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return EventSource;\n}());\nexports.EventSource = EventSource;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/common/EventSource.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAElC,iCAA8C;AAC9C,+BAA0C;AAM1C;IAMI,qBAAmB,QAAoC;QAL/C,uBAAkB,GAA+C,EAAE,CAAC;QAEpE,mBAAc,GAAY,KAAK,CAAC;QAChC,wBAAmB,GAAgB,SAAS,CAAC;QAGjD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;IACjC,CAAC;IAEM,6BAAO,GAAd,UAAe,KAAa;QACxB,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACnB,MAAM,CAAC,IAAI,2BAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;SAClD;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,KAAK,IAAM,SAAS,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACnC,IAAI,SAAS,EAAE;oBACX,IAAI,KAAK,CAAC,QAAQ,EAAE;wBAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;4BAC5B,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;yBACxD;qBACJ;iBACJ;aACJ;SACJ;QAED,KAAK,IAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3C,IAAI,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;gBAC7C,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC;aAC3C;SACJ;IACL,CAAC;IAEM,4BAAM,GAAb,UAAc,eAAwC;QAAtD,iBASC;QARG,IAAM,EAAE,GAAG,uBAAgB,EAAE,CAAC;QAC9B,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC;QAC9C,OAAO;YACH,MAAM,EAAE;gBACJ,OAAO,KAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;gBACnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YAC7B,CAAC;SACJ,CAAC;IACN,CAAC;IAEM,oCAAc,GAArB,UAAsB,QAAgC;QAClD,OAAO,IAAI,CAAC,MAAM,CAAC,UAAC,CAAS,IAAW,OAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;IACjE,CAAC;IAEM,2CAAqB,GAA5B,UAA6B,QAAgC;QACzD,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC5B,KAAK,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,CAAC,0DAA0D;SACrG;QACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,UAAC,CAAS,IAAW,OAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;QACjF,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACpC,CAAC;IAEM,gCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAEM,6BAAO,GAAd;QACI,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED,sBAAW,iCAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;;;OAAA;IACL,kBAAC;AAAD,CArEA,AAqEC,IAAA;AArEY,kCAAW","file":"EventSource.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n"]}},"error":null,"hash":"055c52b3e391c2ef06799f7a387bb2d8","cacheData":{"env":{}}}