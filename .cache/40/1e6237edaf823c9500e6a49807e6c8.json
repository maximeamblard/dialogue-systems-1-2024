{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"fs","loc":{"line":26,"column":30,"index":1154},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener.js","resolved":"/Users/amblardv5/.nvm/versions/node/v22.11.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"../sdk/LogLevel","loc":{"line":27,"column":25,"index":1187},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/LogLevel.js"},{"name":"../sdk/Contracts","loc":{"line":28,"column":26,"index":1233},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js"}],"generated":{"js":"\"use strict\";\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsoleLoggingListener = void 0;\nvar fs = __importStar(require(\"fs\"));\nvar LogLevel_1 = require(\"../sdk/LogLevel\");\nvar Contracts_1 = require(\"../sdk/Contracts\");\nvar ConsoleLoggingListener = /** @class */ (function () {\n    function ConsoleLoggingListener(logLevelFilter) {\n        if (logLevelFilter === void 0) { logLevelFilter = LogLevel_1.LogLevel.None; }\n        this.privLogPath = undefined;\n        this.privLogLevelFilter = logLevelFilter;\n    }\n    Object.defineProperty(ConsoleLoggingListener.prototype, \"logPath\", {\n        set: function (path) {\n            Contracts_1.Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\n            this.privLogPath = path;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ConsoleLoggingListener.prototype.onEvent = function (event) {\n        if (event.eventType >= this.privLogLevelFilter) {\n            var log = this.toString(event);\n            if (!!this.privLogPath) {\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\n            }\n            switch (event.eventType) {\n                case LogLevel_1.LogLevel.Debug:\n                    // eslint-disable-next-line no-console\n                    console.debug(log);\n                    break;\n                case LogLevel_1.LogLevel.Info:\n                    // eslint-disable-next-line no-console\n                    console.info(log);\n                    break;\n                case LogLevel_1.LogLevel.Warning:\n                    // eslint-disable-next-line no-console\n                    console.warn(log);\n                    break;\n                case LogLevel_1.LogLevel.Error:\n                    // eslint-disable-next-line no-console\n                    console.error(log);\n                    break;\n                default:\n                    // eslint-disable-next-line no-console\n                    console.log(log);\n                    break;\n            }\n        }\n    };\n    ConsoleLoggingListener.prototype.toString = function (event) {\n        var logFragments = [\n            \"\" + event.eventTime,\n            \"\" + event.name,\n        ];\n        var e = event;\n        for (var prop in e) {\n            if (prop && event.hasOwnProperty(prop) &&\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\n                prop !== \"eventId\" && prop !== \"name\" &&\n                prop !== \"constructor\") {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                var value = e[prop];\n                var valueToLog = \"<NULL>\";\n                if (value !== undefined && value !== null) {\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\n                        valueToLog = value.toString();\n                    }\n                    else {\n                        valueToLog = JSON.stringify(value);\n                    }\n                }\n                logFragments.push(prop + \": \" + valueToLog);\n            }\n        }\n        return logFragments.join(\" | \");\n    };\n    return ConsoleLoggingListener;\n}());\nexports.ConsoleLoggingListener = ConsoleLoggingListener;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/common.browser/ConsoleLoggingListener.ts"],"names":[],"mappings":"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","file":"ConsoleLoggingListener.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports\";\r\nimport { Contracts } from \"../sdk/Contracts\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            switch (event.eventType) {\r\n                case LogLevel.Debug:\r\n                    // eslint-disable-next-line no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case LogLevel.Info:\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(log);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    // eslint-disable-next-line no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case LogLevel.Error:\r\n                    // eslint-disable-next-line no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // eslint-disable-next-line no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n"]}},"error":null,"hash":"714cc34c39d7e9ee53cc29666334ffa1","cacheData":{"env":{}}}