{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../../common.browser/Exports","loc":{"line":19,"column":24,"index":831},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js"},{"name":"../../common/Exports","loc":{"line":20,"column":24,"index":888},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js"},{"name":"../../sdk/Contracts","loc":{"line":21,"column":26,"index":939},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js"},{"name":"../../sdk/Exports","loc":{"line":22,"column":24,"index":987},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"},{"name":"../ConnectionFactoryBase","loc":{"line":23,"column":38,"index":1047},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ConnectionFactoryBase.js"},{"name":"./ConversationConnectionConfig","loc":{"line":24,"column":45,"index":1121},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionConfig.js"},{"name":"./ConversationWebsocketMessageFormatter","loc":{"line":25,"column":54,"index":1210},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConversationConnectionFactory = void 0;\nvar Exports_1 = require(\"../../common.browser/Exports\");\nvar Exports_2 = require(\"../../common/Exports\");\nvar Contracts_1 = require(\"../../sdk/Contracts\");\nvar Exports_3 = require(\"../../sdk/Exports\");\nvar ConnectionFactoryBase_1 = require(\"../ConnectionFactoryBase\");\nvar ConversationConnectionConfig_1 = require(\"./ConversationConnectionConfig\");\nvar ConversationWebsocketMessageFormatter_1 = require(\"./ConversationWebsocketMessageFormatter\");\n/**\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\n * The conversation must already have been started or joined.\n */\nvar ConversationConnectionFactory = /** @class */ (function (_super) {\n    __extends(ConversationConnectionFactory, _super);\n    function ConversationConnectionFactory() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ConversationConnectionFactory.prototype.create = function (config, authInfo, connectionId) {\n        var endpointHost = config.parameters.getProperty(Exports_3.PropertyId.ConversationTranslator_Host, ConversationConnectionConfig_1.ConversationConnectionConfig.host);\n        var correlationId = config.parameters.getProperty(Exports_3.PropertyId.ConversationTranslator_CorrelationId, Exports_2.createGuid());\n        var endpoint = \"wss://\" + endpointHost + ConversationConnectionConfig_1.ConversationConnectionConfig.webSocketPath;\n        var token = config.parameters.getProperty(Exports_3.PropertyId.ConversationTranslator_Token, undefined);\n        Contracts_1.Contracts.throwIfNullOrUndefined(token, \"token\");\n        var queryParams = {};\n        queryParams[ConversationConnectionConfig_1.ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig_1.ConversationConnectionConfig.apiVersion;\n        queryParams[ConversationConnectionConfig_1.ConversationConnectionConfig.configParams.token] = token;\n        queryParams[ConversationConnectionConfig_1.ConversationConnectionConfig.configParams.correlationId] = correlationId;\n        var enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new Exports_1.WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter_1.ConversationWebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n    return ConversationConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase));\nexports.ConversationConnectionFactory = ConversationConnectionFactory;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/common.speech/Transcription/ConversationConnectionFactory.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;AAElC,wDAA8E;AAC9E,gDAAkF;AAClF,iDAAgD;AAChD,6CAA+C;AAC/C,kEAAiE;AAEjE,+EAA8E;AAC9E,iGAAgG;AAEhG;;;GAGG;AACH;IAAmD,iDAAqB;IAAxE;;IAmBA,CAAC;IAjBU,8CAAM,GAAb,UAAc,MAAwB,EAAE,QAAkB,EAAE,YAAqB;QAE7E,IAAM,YAAY,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,2BAA2B,EAAE,2DAA4B,CAAC,IAAI,CAAC,CAAC;QACtI,IAAM,aAAa,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,oCAAoC,EAAE,oBAAU,EAAE,CAAC,CAAC;QAE3H,IAAM,QAAQ,GAAW,WAAS,YAAY,GAAG,2DAA4B,CAAC,aAAe,CAAC;QAC9F,IAAM,KAAK,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,4BAA4B,EAAE,SAAS,CAAC,CAAC;QACxG,qBAAS,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAEjD,IAAM,WAAW,GAA8B,EAAE,CAAC;QAClD,WAAW,CAAC,2DAA4B,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,2DAA4B,CAAC,UAAU,CAAC;QAC5G,WAAW,CAAC,2DAA4B,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QACrE,WAAW,CAAC,2DAA4B,CAAC,YAAY,CAAC,aAAa,CAAC,GAAG,aAAa,CAAC;QACrF,IAAM,iBAAiB,GAAY,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,mCAAmC,EAAE,OAAO,CAAC,KAAK,MAAM,CAAC;QAC1H,OAAO,IAAI,6BAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,EAAE,IAAI,6EAAqC,EAAE,EAAE,mBAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;IACpL,CAAC;IAEL,oCAAC;AAAD,CAnBA,AAmBC,CAnBkD,6CAAqB,GAmBvE;AAnBY,sEAA6B","file":"ConversationConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n"]}},"error":null,"hash":"8328c12061be7cc10383a2e2498448d3","cacheData":{"env":{}}}