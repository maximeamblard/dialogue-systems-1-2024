{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../common.browser/Exports","loc":{"line":42,"column":24,"index":2709},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js"},{"name":"../common/Exports","loc":{"line":43,"column":24,"index":2763},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js"},{"name":"../sdk/Exports","loc":{"line":44,"column":24,"index":2809},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"},{"name":"./Exports","loc":{"line":45,"column":24,"index":2852},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js"},{"name":"./SpeechConnectionMessage.Internal","loc":{"line":46,"column":49,"index":2915},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionMessage.Internal.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServiceRecognizerBase = void 0;\nvar Exports_1 = require(\"../common.browser/Exports\");\nvar Exports_2 = require(\"../common/Exports\");\nvar Exports_3 = require(\"../sdk/Exports\");\nvar Exports_4 = require(\"./Exports\");\nvar SpeechConnectionMessage_Internal_1 = require(\"./SpeechConnectionMessage.Internal\");\nvar ServiceRecognizerBase = /** @class */ (function () {\n    function ServiceRecognizerBase(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\n        var _this = this;\n        // A promise for a configured connection.\n        // Do not consume directly, call fetchConnection instead.\n        this.privConnectionConfigurationPromise = undefined;\n        // A promise for a connection, but one that has not had the speech context sent yet.\n        // Do not consume directly, call fetchConnection instead.\n        this.privConnectionPromise = undefined;\n        this.privSetTimeout = setTimeout;\n        this.privIsLiveAudio = false;\n        this.recognizeOverride = undefined;\n        this.disconnectOverride = undefined;\n        this.receiveMessageOverride = undefined;\n        this.sendPrePayloadJSONOverride = undefined;\n        this.postConnectImplOverride = undefined;\n        this.configConnectionOverride = undefined;\n        if (!authentication) {\n            throw new Exports_2.ArgumentNullError(\"authentication\");\n        }\n        if (!connectionFactory) {\n            throw new Exports_2.ArgumentNullError(\"connectionFactory\");\n        }\n        if (!audioSource) {\n            throw new Exports_2.ArgumentNullError(\"audioSource\");\n        }\n        if (!recognizerConfig) {\n            throw new Exports_2.ArgumentNullError(\"recognizerConfig\");\n        }\n        this.privMustReportEndOfStream = false;\n        this.privAuthentication = authentication;\n        this.privConnectionFactory = connectionFactory;\n        this.privAudioSource = audioSource;\n        this.privRecognizerConfig = recognizerConfig;\n        this.privIsDisposed = false;\n        this.privRecognizer = recognizer;\n        this.privRequestSession = new Exports_4.RequestSession(this.privAudioSource.id());\n        this.privConnectionEvents = new Exports_2.EventSource();\n        this.privServiceEvents = new Exports_2.EventSource();\n        this.privDynamicGrammar = new Exports_4.DynamicGrammarBuilder();\n        this.privSpeechContext = new Exports_4.SpeechContext(this.privDynamicGrammar);\n        this.privAgentConfig = new Exports_4.AgentConfig();\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\n            this.privSetTimeout = Exports_2.Timeout.setTimeout;\n        }\n        this.connectionEvents.attach(function (connectionEvent) {\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                var connectionClosedEvent = connectionEvent;\n                if (connectionClosedEvent.statusCode === 1003 ||\n                    connectionClosedEvent.statusCode === 1007 ||\n                    connectionClosedEvent.statusCode === 1002 ||\n                    connectionClosedEvent.statusCode === 4000 ||\n                    _this.privRequestSession.numConnectionAttempts > _this.privRecognizerConfig.maxRetryCount) {\n                    void _this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? Exports_3.CancellationErrorCode.BadRequestParameters : Exports_3.CancellationErrorCode.ConnectionFailure, connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\n                }\n            }\n        });\n    }\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"audioSource\", {\n        get: function () {\n            return this.privAudioSource;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"speechContext\", {\n        get: function () {\n            return this.privSpeechContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"dynamicGrammar\", {\n        get: function () {\n            return this.privDynamicGrammar;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"agentConfig\", {\n        get: function () {\n            return this.privAgentConfig;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"conversationTranslatorToken\", {\n        set: function (token) {\n            this.privRecognizerConfig.parameters.setProperty(Exports_3.PropertyId.ConversationTranslator_Token, token);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"authentication\", {\n        set: function (auth) {\n            this.privAuthentication = this.authentication;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ServiceRecognizerBase.prototype.isDisposed = function () {\n        return this.privIsDisposed;\n    };\n    ServiceRecognizerBase.prototype.dispose = function (reason) {\n        return __awaiter(this, void 0, void 0, function () {\n            var connection, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.privIsDisposed = true;\n                        if (!(this.privConnectionConfigurationPromise !== undefined)) return [3 /*break*/, 5];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, this.privConnectionConfigurationPromise];\n                    case 2:\n                        connection = _a.sent();\n                        return [4 /*yield*/, connection.dispose(reason)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        // The connection is in a bad state. But we're trying to kill it, so...\n                        return [2 /*return*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"connectionEvents\", {\n        get: function () {\n            return this.privConnectionEvents;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"serviceEvents\", {\n        get: function () {\n            return this.privServiceEvents;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"recognitionMode\", {\n        get: function () {\n            return this.privRecognizerConfig.recognitionMode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ServiceRecognizerBase.prototype.recognize = function (recoMode, successCallback, errorCallBack) {\n        return __awaiter(this, void 0, void 0, function () {\n            var conPromise, audioNode, audioStreamNode, format, deviceInfo, error_2, error_3, sessionStartEventArgs, audioSendPromise;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.recognizeOverride !== undefined)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.recognizeOverride(recoMode, successCallback, errorCallBack)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 2:\n                        // Clear the existing configuration promise to force a re-transmission of config and context.\n                        this.privConnectionConfigurationPromise = undefined;\n                        this.privRecognizerConfig.recognitionMode = recoMode;\n                        this.privSuccessCallback = successCallback;\n                        this.privErrorCallback = errorCallBack;\n                        this.privRequestSession.startNewRecognition();\n                        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\n                        conPromise = this.connectImpl();\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 8, , 10]);\n                        return [4 /*yield*/, this.audioSource.attach(this.privRequestSession.audioNodeId)];\n                    case 4:\n                        audioStreamNode = _a.sent();\n                        return [4 /*yield*/, this.audioSource.format];\n                    case 5:\n                        format = _a.sent();\n                        return [4 /*yield*/, this.audioSource.deviceInfo];\n                    case 6:\n                        deviceInfo = _a.sent();\n                        this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === Exports_4.type.Microphones;\n                        audioNode = new Exports_1.ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\n                        return [4 /*yield*/, this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false)];\n                    case 7:\n                        _a.sent();\n                        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\n                        return [3 /*break*/, 10];\n                    case 8:\n                        error_2 = _a.sent();\n                        return [4 /*yield*/, this.privRequestSession.onStopRecognizing()];\n                    case 9:\n                        _a.sent();\n                        throw error_2;\n                    case 10:\n                        _a.trys.push([10, 12, , 14]);\n                        return [4 /*yield*/, conPromise];\n                    case 11:\n                        _a.sent();\n                        return [3 /*break*/, 14];\n                    case 12:\n                        error_3 = _a.sent();\n                        return [4 /*yield*/, this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.ConnectionFailure, error_3)];\n                    case 13:\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 14:\n                        sessionStartEventArgs = new Exports_3.SessionEventArgs(this.privRequestSession.sessionId);\n                        if (!!this.privRecognizer.sessionStarted) {\n                            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n                        }\n                        void this.receiveMessage();\n                        audioSendPromise = this.sendAudio(audioNode);\n                        audioSendPromise.catch(function (error) { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.RuntimeError, error)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.prototype.stopRecognizing = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.privRequestSession.isRecognizing) return [3 /*break*/, 8];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 6, 8]);\n                        return [4 /*yield*/, this.audioSource.turnOff()];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.sendFinalAudio()];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.privRequestSession.onStopRecognizing()];\n                    case 4:\n                        _a.sent();\n                        return [4 /*yield*/, this.privRequestSession.turnCompletionPromise];\n                    case 5:\n                        _a.sent();\n                        return [3 /*break*/, 8];\n                    case 6: return [4 /*yield*/, this.privRequestSession.dispose()];\n                    case 7:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.prototype.connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.connectImpl()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, Promise.resolve()];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.prototype.connectAsync = function (cb, err) {\n        this.connectImpl().then(function () {\n            try {\n                if (!!cb) {\n                    cb();\n                }\n            }\n            catch (e) {\n                if (!!err) {\n                    err(e);\n                }\n            }\n        }, function (reason) {\n            try {\n                if (!!err) {\n                    err(reason);\n                }\n                /* eslint-disable no-empty */\n            }\n            catch (error) {\n            }\n        });\n    };\n    ServiceRecognizerBase.prototype.disconnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.NoError, \"Disconnecting\")];\n                    case 1:\n                        _a.sent();\n                        if (!(this.disconnectOverride !== undefined)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.disconnectOverride()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        if (!(this.privConnectionPromise !== undefined)) return [3 /*break*/, 8];\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 7, , 8]);\n                        return [4 /*yield*/, this.privConnectionPromise];\n                    case 5: return [4 /*yield*/, (_a.sent()).dispose()];\n                    case 6:\n                        _a.sent();\n                        return [3 /*break*/, 8];\n                    case 7:\n                        error_4 = _a.sent();\n                        return [3 /*break*/, 8];\n                    case 8:\n                        this.privConnectionPromise = undefined;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ServiceRecognizerBase.prototype.sendMessage = function (message) {\n        return;\n    };\n    ServiceRecognizerBase.prototype.sendNetworkMessage = function (path, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var type, contentType, connection;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        type = typeof payload === \"string\" ? Exports_2.MessageType.Text : Exports_2.MessageType.Binary;\n                        contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n                        return [4 /*yield*/, this.fetchConnection()];\n                    case 1:\n                        connection = _a.sent();\n                        return [2 /*return*/, connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload))];\n                }\n            });\n        });\n    };\n    Object.defineProperty(ServiceRecognizerBase.prototype, \"activityTemplate\", {\n        get: function () {\n            return this.privActivityTemplate;\n        },\n        set: function (messagePayload) {\n            this.privActivityTemplate = messagePayload;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ServiceRecognizerBase.prototype.sendTelemetryData = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var telemetryData, connection;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        telemetryData = this.privRequestSession.getTelemetry();\n                        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\n                            this.privIsDisposed ||\n                            null === telemetryData) {\n                            return [2 /*return*/];\n                        }\n                        if (!!ServiceRecognizerBase.telemetryData) {\n                            try {\n                                ServiceRecognizerBase.telemetryData(telemetryData);\n                                /* eslint-disable no-empty */\n                            }\n                            catch (_b) { }\n                        }\n                        return [4 /*yield*/, this.fetchConnection()];\n                    case 1:\n                        connection = _a.sent();\n                        return [4 /*yield*/, connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Text, \"telemetry\", this.privRequestSession.requestId, \"application/json\", telemetryData))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Cancels recognition.\n    ServiceRecognizerBase.prototype.cancelRecognitionLocal = function (cancellationReason, errorCode, error) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!!this.privRequestSession.isRecognizing) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.privRequestSession.onStopRecognizing()];\n                    case 1:\n                        _a.sent();\n                        this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error);\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.prototype.receiveMessage = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var connection, message, connectionMessage, _a, speechStartDetected, speechStartEventArgs, json, speechStopDetected, speechStopEventArgs, sessionStopEventArgs, error_5;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 18, , 19]);\n                        if (this.privIsDisposed) {\n                            // We're done.\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this.fetchConnection()];\n                    case 1:\n                        connection = _b.sent();\n                        return [4 /*yield*/, connection.read()];\n                    case 2:\n                        message = _b.sent();\n                        if (this.receiveMessageOverride !== undefined) {\n                            return [2 /*return*/, this.receiveMessageOverride()];\n                        }\n                        // indicates we are draining the queue and it came with no message;\n                        if (!message) {\n                            if (!this.privRequestSession.isRecognizing) {\n                                return [2 /*return*/];\n                            }\n                            else {\n                                return [2 /*return*/, this.receiveMessage()];\n                            }\n                        }\n                        this.privServiceHasSentMessage = true;\n                        connectionMessage = SpeechConnectionMessage_Internal_1.SpeechConnectionMessage.fromConnectionMessage(message);\n                        if (!(connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase())) return [3 /*break*/, 17];\n                        _a = connectionMessage.path.toLowerCase();\n                        switch (_a) {\n                            case \"turn.start\": return [3 /*break*/, 3];\n                            case \"speech.startdetected\": return [3 /*break*/, 4];\n                            case \"speech.enddetected\": return [3 /*break*/, 5];\n                            case \"turn.end\": return [3 /*break*/, 6];\n                        }\n                        return [3 /*break*/, 15];\n                    case 3:\n                        this.privMustReportEndOfStream = true;\n                        this.privRequestSession.onServiceTurnStartResponse();\n                        return [3 /*break*/, 17];\n                    case 4:\n                        speechStartDetected = Exports_4.SpeechDetected.fromJSON(connectionMessage.textBody);\n                        speechStartEventArgs = new Exports_3.RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n                        if (!!this.privRecognizer.speechStartDetected) {\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n                        }\n                        return [3 /*break*/, 17];\n                    case 5:\n                        json = void 0;\n                        if (connectionMessage.textBody.length > 0) {\n                            json = connectionMessage.textBody;\n                        }\n                        else {\n                            // If the request was empty, the JSON returned is empty.\n                            json = \"{ Offset: 0 }\";\n                        }\n                        speechStopDetected = Exports_4.SpeechDetected.fromJSON(json);\n                        // Only shrink the buffers for continuous recognition.\n                        // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\n                        if (this.privRecognizerConfig.isContinuousRecognition) {\n                            this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\n                        }\n                        speechStopEventArgs = new Exports_3.RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n                        if (!!this.privRecognizer.speechEndDetected) {\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n                        }\n                        return [3 /*break*/, 17];\n                    case 6: return [4 /*yield*/, this.sendTelemetryData()];\n                    case 7:\n                        _b.sent();\n                        if (!(this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream)) return [3 /*break*/, 9];\n                        this.privMustReportEndOfStream = false;\n                        return [4 /*yield*/, this.cancelRecognitionLocal(Exports_3.CancellationReason.EndOfStream, Exports_3.CancellationErrorCode.NoError, undefined)];\n                    case 8:\n                        _b.sent();\n                        _b.label = 9;\n                    case 9:\n                        sessionStopEventArgs = new Exports_3.SessionEventArgs(this.privRequestSession.sessionId);\n                        return [4 /*yield*/, this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition)];\n                    case 10:\n                        _b.sent();\n                        if (!(!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing)) return [3 /*break*/, 11];\n                        if (!!this.privRecognizer.sessionStopped) {\n                            this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                        }\n                        return [2 /*return*/];\n                    case 11: return [4 /*yield*/, this.fetchConnection()];\n                    case 12:\n                        connection = _b.sent();\n                        return [4 /*yield*/, this.sendPrePayloadJSON(connection)];\n                    case 13:\n                        _b.sent();\n                        _b.label = 14;\n                    case 14: return [3 /*break*/, 17];\n                    case 15: return [4 /*yield*/, this.processTypeSpecificMessages(connectionMessage)];\n                    case 16:\n                        if (!(_b.sent())) {\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\n                            if (!!this.privServiceEvents) {\n                                this.serviceEvents.onEvent(new Exports_2.ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                            }\n                        }\n                        _b.label = 17;\n                    case 17: return [2 /*return*/, this.receiveMessage()];\n                    case 18:\n                        error_5 = _b.sent();\n                        return [2 /*return*/, null];\n                    case 19: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.prototype.sendSpeechContext = function (connection, generateNewRequestId) {\n        var speechContextJson = this.speechContext.toJSON();\n        if (generateNewRequestId) {\n            this.privRequestSession.onSpeechContext();\n        }\n        if (speechContextJson) {\n            return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Text, \"speech.context\", this.privRequestSession.requestId, \"application/json\", speechContextJson));\n        }\n        return;\n    };\n    // Encapsulated for derived service recognizers that need to send additional JSON\n    ServiceRecognizerBase.prototype.sendPrePayloadJSON = function (connection, generateNewRequestId) {\n        if (generateNewRequestId === void 0) { generateNewRequestId = true; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.sendPrePayloadJSONOverride !== undefined) {\n                            return [2 /*return*/, this.sendPrePayloadJSONOverride(connection)];\n                        }\n                        return [4 /*yield*/, this.sendSpeechContext(connection, generateNewRequestId)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.sendWaveHeader(connection)];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.prototype.sendWaveHeader = function (connection) {\n        return __awaiter(this, void 0, void 0, function () {\n            var format;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.audioSource.format];\n                    case 1:\n                        format = _a.sent();\n                        // this.writeBufferToConsole(format.header);\n                        return [2 /*return*/, connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Binary, \"audio\", this.privRequestSession.requestId, \"audio/x-wav\", format.header))];\n                }\n            });\n        });\n    };\n    // Establishes a websocket connection to the end point.\n    ServiceRecognizerBase.prototype.connectImpl = function () {\n        var _this = this;\n        if (this.privConnectionPromise !== undefined) {\n            return this.privConnectionPromise.then(function (connection) {\n                if (connection.state() === Exports_2.ConnectionState.Disconnected) {\n                    _this.privConnectionId = null;\n                    _this.privConnectionPromise = undefined;\n                    _this.privServiceHasSentMessage = false;\n                    return _this.connectImpl();\n                }\n                return _this.privConnectionPromise;\n            }, function () {\n                _this.privConnectionId = null;\n                _this.privConnectionPromise = undefined;\n                _this.privServiceHasSentMessage = false;\n                return _this.connectImpl();\n            });\n        }\n        this.privConnectionPromise = this.retryableConnect();\n        // Attach an empty handler to allow the promise to run in the background while\n        // other startup events happen. It'll eventually be awaited on.\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.privConnectionPromise.catch(function () { });\n        if (this.postConnectImplOverride !== undefined) {\n            return this.postConnectImplOverride(this.privConnectionPromise);\n        }\n        return this.privConnectionPromise;\n    };\n    ServiceRecognizerBase.prototype.sendSpeechServiceConfig = function (connection, requestSession, SpeechServiceConfigJson) {\n        requestSession.onSpeechContext();\n        // filter out anything that is not required for the service to work.\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\n            var withTelemetry = JSON.parse(SpeechServiceConfigJson);\n            var replacement = {\n                context: {\n                    system: withTelemetry.context.system,\n                },\n            };\n            SpeechServiceConfigJson = JSON.stringify(replacement);\n        }\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\n            var json = JSON.parse(SpeechServiceConfigJson);\n            json.context.DisableReferenceChannel = \"True\";\n            json.context.MicSpec = \"1_0_0\";\n            SpeechServiceConfigJson = JSON.stringify(json);\n        }\n        if (SpeechServiceConfigJson) {\n            return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Text, \"speech.config\", requestSession.requestId, \"application/json\", SpeechServiceConfigJson));\n        }\n        return;\n    };\n    ServiceRecognizerBase.prototype.fetchConnection = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.privConnectionConfigurationPromise !== undefined) {\n                            return [2 /*return*/, this.privConnectionConfigurationPromise.then(function (connection) {\n                                    if (connection.state() === Exports_2.ConnectionState.Disconnected) {\n                                        _this.privConnectionId = null;\n                                        _this.privConnectionConfigurationPromise = undefined;\n                                        _this.privServiceHasSentMessage = false;\n                                        return _this.fetchConnection();\n                                    }\n                                    return _this.privConnectionConfigurationPromise;\n                                }, function () {\n                                    _this.privConnectionId = null;\n                                    _this.privConnectionConfigurationPromise = undefined;\n                                    _this.privServiceHasSentMessage = false;\n                                    return _this.fetchConnection();\n                                })];\n                        }\n                        this.privConnectionConfigurationPromise = this.configureConnection();\n                        return [4 /*yield*/, this.privConnectionConfigurationPromise];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.prototype.sendAudio = function (audioStreamNode) {\n        return __awaiter(this, void 0, void 0, function () {\n            var audioFormat, nextSendTime, fastLaneSizeMs, maxSendUnthrottledBytes, startRecogNumber, readAndUploadCycle;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.audioSource.format];\n                    case 1:\n                        audioFormat = _a.sent();\n                        nextSendTime = Date.now();\n                        fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\n                        maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\n                        startRecogNumber = this.privRequestSession.recogNumber;\n                        readAndUploadCycle = function () { return __awaiter(_this, void 0, void 0, function () {\n                            var connection, audioStreamChunk, payload, sendDelay;\n                            var _this = this;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!(!this.privIsDisposed &&\n                                            !this.privRequestSession.isSpeechEnded &&\n                                            this.privRequestSession.isRecognizing &&\n                                            this.privRequestSession.recogNumber === startRecogNumber)) return [3 /*break*/, 5];\n                                        return [4 /*yield*/, this.fetchConnection()];\n                                    case 1:\n                                        connection = _a.sent();\n                                        return [4 /*yield*/, audioStreamNode.read()];\n                                    case 2:\n                                        audioStreamChunk = _a.sent();\n                                        // we have a new audio chunk to upload.\n                                        if (this.privRequestSession.isSpeechEnded) {\n                                            // If service already recognized audio end then don't send any more audio\n                                            return [2 /*return*/];\n                                        }\n                                        payload = void 0;\n                                        sendDelay = void 0;\n                                        if (!audioStreamChunk || audioStreamChunk.isEnd) {\n                                            payload = null;\n                                            sendDelay = 0;\n                                        }\n                                        else {\n                                            payload = audioStreamChunk.buffer;\n                                            this.privRequestSession.onAudioSent(payload.byteLength);\n                                            if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\n                                                sendDelay = 0;\n                                            }\n                                            else {\n                                                sendDelay = Math.max(0, nextSendTime - Date.now());\n                                            }\n                                        }\n                                        if (!(0 !== sendDelay)) return [3 /*break*/, 4];\n                                        return [4 /*yield*/, this.delay(sendDelay)];\n                                    case 3:\n                                        _a.sent();\n                                        _a.label = 4;\n                                    case 4:\n                                        if (payload !== null) {\n                                            nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\n                                        }\n                                        // Are we still alive?\n                                        if (!this.privIsDisposed &&\n                                            !this.privRequestSession.isSpeechEnded &&\n                                            this.privRequestSession.isRecognizing &&\n                                            this.privRequestSession.recogNumber === startRecogNumber) {\n                                            connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)).catch(function () {\n                                                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                                                _this.privRequestSession.onServiceTurnEndResponse(_this.privRecognizerConfig.isContinuousRecognition).catch(function () { });\n                                            });\n                                            if (!(audioStreamChunk === null || audioStreamChunk === void 0 ? void 0 : audioStreamChunk.isEnd)) {\n                                                // this.writeBufferToConsole(payload);\n                                                // Regardless of success or failure, schedule the next upload.\n                                                // If the underlying connection was broken, the next cycle will\n                                                // get a new connection and re-transmit missing audio automatically.\n                                                return [2 /*return*/, readAndUploadCycle()];\n                                            }\n                                            else {\n                                                // the audio stream has been closed, no need to schedule next\n                                                // read-upload cycle.\n                                                if (!this.privIsLiveAudio) {\n                                                    this.privRequestSession.onSpeechEnded();\n                                                }\n                                            }\n                                        }\n                                        _a.label = 5;\n                                    case 5: return [2 /*return*/];\n                                }\n                            });\n                        }); };\n                        return [2 /*return*/, readAndUploadCycle()];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.prototype.retryableConnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var isUnAuthorized, sessionId, lastStatusCode, lastReason, authPromise, auth, connection, response;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        isUnAuthorized = false;\n                        this.privAuthFetchEventId = Exports_2.createNoDashGuid();\n                        sessionId = this.privRequestSession.sessionId;\n                        this.privConnectionId = (sessionId !== undefined) ? sessionId : Exports_2.createNoDashGuid();\n                        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n                        lastStatusCode = 0;\n                        lastReason = \"\";\n                        _a.label = 1;\n                    case 1:\n                        if (!(this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount)) return [3 /*break*/, 8];\n                        authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n                        return [4 /*yield*/, authPromise];\n                    case 2:\n                        auth = _a.sent();\n                        return [4 /*yield*/, this.privRequestSession.onAuthCompleted(false)];\n                    case 3:\n                        _a.sent();\n                        connection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\n                        // Attach the telemetry handlers.\n                        this.privRequestSession.listenForServiceTelemetry(connection.events);\n                        // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n                        // it'll stop sending events.\n                        connection.events.attach(function (event) {\n                            _this.connectionEvents.onEvent(event);\n                        });\n                        return [4 /*yield*/, connection.open()];\n                    case 4:\n                        response = _a.sent();\n                        if (!(response.statusCode === 200)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.privRequestSession.onConnectionEstablishCompleted(response.statusCode)];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, Promise.resolve(connection)];\n                    case 6:\n                        if (response.statusCode === 1006) {\n                            isUnAuthorized = true;\n                        }\n                        _a.label = 7;\n                    case 7:\n                        lastStatusCode = response.statusCode;\n                        lastReason = response.reason;\n                        this.privRequestSession.onRetryConnection();\n                        return [3 /*break*/, 1];\n                    case 8: return [4 /*yield*/, this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason)];\n                    case 9:\n                        _a.sent();\n                        return [2 /*return*/, Promise.reject(\"Unable to contact server. StatusCode: \" + lastStatusCode + \", \" + this.privRecognizerConfig.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Endpoint) + \" Reason: \" + lastReason)];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.prototype.delay = function (delayMs) {\n        var _this = this;\n        return new Promise(function (resolve) { return _this.privSetTimeout(resolve, delayMs); });\n    };\n    ServiceRecognizerBase.prototype.writeBufferToConsole = function (buffer) {\n        var out = \"Buffer Size: \";\n        if (null === buffer) {\n            out += \"null\";\n        }\n        else {\n            var readView = new Uint8Array(buffer);\n            out += buffer.byteLength + \"\\r\\n\";\n            for (var i = 0; i < buffer.byteLength; i++) {\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\n                if (((i + 1) % 16) === 0) {\n                    // eslint-disable-next-line no-console\n                    console.info(out);\n                    out = \"\";\n                }\n            }\n        }\n        // eslint-disable-next-line no-console\n        console.info(out);\n    };\n    ServiceRecognizerBase.prototype.sendFinalAudio = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var connection;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.fetchConnection()];\n                    case 1:\n                        connection = _a.sent();\n                        return [4 /*yield*/, connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\n    ServiceRecognizerBase.prototype.configureConnection = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var connection;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.connectImpl()];\n                    case 1:\n                        connection = _a.sent();\n                        if (this.configConnectionOverride !== undefined) {\n                            return [2 /*return*/, this.configConnectionOverride(connection)];\n                        }\n                        return [4 /*yield*/, this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize())];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.sendPrePayloadJSON(connection, false)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/, connection];\n                }\n            });\n        });\n    };\n    ServiceRecognizerBase.telemetryDataEnabled = true;\n    return ServiceRecognizerBase;\n}());\nexports.ServiceRecognizerBase = ServiceRecognizerBase;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/common.speech/ServiceRecognizerBase.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElC,qDAAgE;AAEhE,6CAe2B;AAE3B,0CAQwB;AAExB,qCASmB;AAOnB,uFAA6E;AAE7E;IA+BI,+BACI,cAA+B,EAC/B,iBAAqC,EACrC,WAAyB,EACzB,gBAAkC,EAClC,UAAsB;QAL1B,iBAuDC;QAlFD,yCAAyC;QACzC,yDAAyD;QACjD,uCAAkC,GAAyB,SAAS,CAAC;QAE7E,oFAAoF;QACpF,yDAAyD;QACjD,0BAAqB,GAAyB,SAAS,CAAC;QAUxD,mBAAc,GAA8C,UAAU,CAAC;QAEvE,oBAAe,GAAY,KAAK,CAAC;QAuH/B,sBAAiB,GAAoH,SAAS,CAAC;QAyG/I,uBAAkB,GAAwB,SAAS,CAAC;QAsGpD,2BAAsB,GAAwB,SAAS,CAAC;QAkHxD,+BAA0B,GAA+C,SAAS,CAAC;QAyBnF,4BAAuB,GAA+D,SAAS,CAAC;QAmChG,6BAAwB,GAAsD,SAAS,CAAC;QApe9F,IAAI,CAAC,cAAc,EAAE;YACjB,MAAM,IAAI,2BAAiB,CAAC,gBAAgB,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,iBAAiB,EAAE;YACpB,MAAM,IAAI,2BAAiB,CAAC,mBAAmB,CAAC,CAAC;SACpD;QAED,IAAI,CAAC,WAAW,EAAE;YACd,MAAM,IAAI,2BAAiB,CAAC,aAAa,CAAC,CAAC;SAC9C;QAED,IAAI,CAAC,gBAAgB,EAAE;YACnB,MAAM,IAAI,2BAAiB,CAAC,kBAAkB,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QACvC,IAAI,CAAC,kBAAkB,GAAG,cAAc,CAAC;QACzC,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;QAC/C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACnC,IAAI,CAAC,oBAAoB,GAAG,gBAAgB,CAAC;QAC7C,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;QACjC,IAAI,CAAC,kBAAkB,GAAG,IAAI,wBAAc,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC;QACxE,IAAI,CAAC,oBAAoB,GAAG,IAAI,qBAAW,EAAmB,CAAC;QAC/D,IAAI,CAAC,iBAAiB,GAAG,IAAI,qBAAW,EAAgB,CAAC;QACzD,IAAI,CAAC,kBAAkB,GAAG,IAAI,+BAAqB,EAAE,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,IAAI,uBAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpE,IAAI,CAAC,eAAe,GAAG,IAAI,qBAAW,EAAE,CAAC;QACzC,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,WAAW,EAAE;YAClE,IAAI,CAAC,cAAc,GAAG,iBAAO,CAAC,UAAU,CAAC;SAC5C;QAED,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAC,eAAgC;YAC1D,IAAI,eAAe,CAAC,IAAI,KAAK,uBAAuB,EAAE;gBAClD,IAAM,qBAAqB,GAAG,eAAwC,CAAC;gBACvE,IAAI,qBAAqB,CAAC,UAAU,KAAK,IAAI;oBACzC,qBAAqB,CAAC,UAAU,KAAK,IAAI;oBACzC,qBAAqB,CAAC,UAAU,KAAK,IAAI;oBACzC,qBAAqB,CAAC,UAAU,KAAK,IAAI;oBACzC,KAAI,CAAC,kBAAkB,CAAC,qBAAqB,GAAG,KAAI,CAAC,oBAAoB,CAAC,aAAa,EACzF;oBACE,KAAK,KAAI,CAAC,sBAAsB,CAAC,4BAAkB,CAAC,KAAK,EACrD,qBAAqB,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC,+BAAqB,CAAC,oBAAoB,CAAC,CAAC,CAAC,+BAAqB,CAAC,iBAAiB,EAC7H,qBAAqB,CAAC,MAAM,+BAA0B,qBAAqB,CAAC,UAAY,CAAC,CAAC;iBACpG;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sBAAW,8CAAW;aAAtB;YACI,OAAO,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;;;OAAA;IAED,sBAAW,gDAAa;aAAxB;YACI,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAClC,CAAC;;;OAAA;IAED,sBAAW,iDAAc;aAAzB;YACI,OAAO,IAAI,CAAC,kBAAkB,CAAC;QACnC,CAAC;;;OAAA;IAED,sBAAW,8CAAW;aAAtB;YACI,OAAO,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;;;OAAA;IAED,sBAAW,8DAA2B;aAAtC,UAAuC,KAAa;YAChD,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACrG,CAAC;;;OAAA;IAED,sBAAW,iDAAc;aAAzB,UAA0B,IAAqB;YAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC;QAClD,CAAC;;;OAAA;IAEM,0CAAU,GAAjB;QACI,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAEY,uCAAO,GAApB,UAAqB,MAAe;;;;;;wBAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;6BACvB,CAAA,IAAI,CAAC,kCAAkC,KAAK,SAAS,CAAA,EAArD,wBAAqD;;;;wBAEjB,qBAAM,IAAI,CAAC,kCAAkC,EAAA;;wBAAvE,UAAU,GAAgB,SAA6C;wBAC7E,qBAAM,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,EAAA;;wBAAhC,SAAgC,CAAC;;;;wBAEjC,uEAAuE;wBACvE,sBAAO;;;;;KAGlB;IAED,sBAAW,mDAAgB;aAA3B;YACI,OAAO,IAAI,CAAC,oBAAoB,CAAC;QACrC,CAAC;;;OAAA;IAED,sBAAW,gDAAa;aAAxB;YACI,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAClC,CAAC;;;OAAA;IAED,sBAAW,kDAAe;aAA1B;YACI,OAAO,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC;QACrD,CAAC;;;OAAA;IAIY,yCAAS,GAAtB,UACI,QAAyB,EACzB,eAAqD,EACrD,aAAkC;;;;;;;6BAG9B,CAAA,IAAI,CAAC,iBAAiB,KAAK,SAAS,CAAA,EAApC,wBAAoC;wBACpC,qBAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,eAAe,EAAE,aAAa,CAAC,EAAA;;wBAAtE,SAAsE,CAAC;wBACvE,sBAAO;;wBAEX,6FAA6F;wBAC7F,IAAI,CAAC,kCAAkC,GAAG,SAAS,CAAC;wBACpD,IAAI,CAAC,oBAAoB,CAAC,eAAe,GAAG,QAAQ,CAAC;wBAErD,IAAI,CAAC,mBAAmB,GAAG,eAAe,CAAC;wBAC3C,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;wBAEvC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,CAAC;wBAC9C,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;wBAGzE,UAAU,GAAyB,IAAI,CAAC,WAAW,EAAE,CAAC;;;;wBAId,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAA;;wBAAtG,eAAe,GAAqB,SAAkE;wBACtE,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAA;;wBAA7D,MAAM,GAA0B,SAA6B;wBACtB,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,EAAA;;wBAAxE,UAAU,GAA6B,SAAiC;wBAC9E,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,KAAK,cAAI,CAAC,WAAW,CAAC;wBAE/E,SAAS,GAAG,IAAI,6BAAmB,CAAC,eAAe,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;wBAC5E,qBAAM,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,SAAS,EAAE,KAAK,CAAC,EAAA;;wBAA5E,SAA4E,CAAC;wBAC7E,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;;;;wBAGrF,qBAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,EAAA;;wBAAjD,SAAiD,CAAC;wBAClD,MAAM,OAAK,CAAC;;;wBAIZ,qBAAM,UAAU,EAAA;;wBAAhB,SAAgB,CAAC;;;;wBAEjB,qBAAM,IAAI,CAAC,sBAAsB,CAAC,4BAAkB,CAAC,KAAK,EAAE,+BAAqB,CAAC,iBAAiB,EAAE,OAAe,CAAC,EAAA;;wBAArH,SAAqH,CAAC;wBACtH,sBAAO;;wBAGL,qBAAqB,GAAqB,IAAI,0BAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;wBAExG,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;4BACtC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;yBAClF;wBAED,KAAK,IAAI,CAAC,cAAc,EAAE,CAAC;wBACrB,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;wBAEnD,gBAAgB,CAAC,KAAK,CAAC,UAAO,KAAa;;;4CACvC,qBAAM,IAAI,CAAC,sBAAsB,CAAC,4BAAkB,CAAC,KAAK,EAAE,+BAAqB,CAAC,YAAY,EAAE,KAAK,CAAC,EAAA;;wCAAtG,SAAsG,CAAC;;;;6BAC1G,CAAC,CAAC;wBAEH,sBAAO;;;;KACV;IAEY,+CAAe,GAA5B;;;;;6BACQ,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAArC,wBAAqC;;;;wBAEjC,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAAhC,SAAgC,CAAC;wBACjC,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;wBAC5B,qBAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,EAAA;;wBAAjD,SAAiD,CAAC;wBAClD,qBAAM,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,EAAA;;wBAAnD,SAAmD,CAAC;;4BAEpD,qBAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAA;;wBAAvC,SAAuC,CAAC;;4BAGhD,sBAAO;;;;KACV;IAEY,uCAAO,GAApB;;;;4BACI,qBAAM,IAAI,CAAC,WAAW,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;wBACzB,sBAAO,OAAO,CAAC,OAAO,EAAE,EAAC;;;;KAC5B;IAEM,4CAAY,GAAnB,UAAoB,EAAa,EAAE,GAAc;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC;YACpB,IAAI;gBACA,IAAI,CAAC,CAAC,EAAE,EAAE;oBACN,EAAE,EAAE,CAAC;iBACR;aACJ;YAAC,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,CAAC,GAAG,EAAE;oBACP,GAAG,CAAC,CAAC,CAAC,CAAC;iBACV;aACJ;QACL,CAAC,EAAE,UAAC,MAAW;YACX,IAAI;gBACA,IAAI,CAAC,CAAC,GAAG,EAAE;oBACP,GAAG,CAAC,MAAM,CAAC,CAAC;iBACf;gBACD,6BAA6B;aAChC;YAAC,OAAO,KAAK,EAAE;aACf;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAIY,0CAAU,GAAvB;;;;;4BACI,qBAAM,IAAI,CAAC,sBAAsB,CAAC,4BAAkB,CAAC,KAAK,EACtD,+BAAqB,CAAC,OAAO,EAC7B,eAAe,CAAC,EAAA;;wBAFpB,SAEoB,CAAC;6BAEjB,CAAA,IAAI,CAAC,kBAAkB,KAAK,SAAS,CAAA,EAArC,wBAAqC;wBACrC,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;wBAA/B,SAA+B,CAAC;;;6BAGhC,CAAA,IAAI,CAAC,qBAAqB,KAAK,SAAS,CAAA,EAAxC,wBAAwC;;;;wBAE7B,qBAAM,IAAI,CAAC,qBAAqB,EAAA;4BAAvC,qBAAM,CAAC,SAAgC,CAAC,CAAC,OAAO,EAAE,EAAA;;wBAAlD,SAAkD,CAAC;;;;;;wBAK3D,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;;;;;KAC1C;IAOD,6DAA6D;IACtD,2CAAW,GAAlB,UAAmB,OAAe;QAC9B,OAAO;IACX,CAAC;IAEY,kDAAkB,GAA/B,UAAgC,IAAY,EAAE,OAA6B;;;;;;wBACjE,IAAI,GAAgB,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,qBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,qBAAW,CAAC,MAAM,CAAC;wBACxF,WAAW,GAAW,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC;wBAElD,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;wBAAtD,UAAU,GAAgB,SAA4B;wBAC5D,sBAAO,UAAU,CAAC,IAAI,CAAC,IAAI,0DAAuB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,EAAC;;;;KAC5H;IAED,sBAAW,mDAAgB;aAI3B;YACI,OAAO,IAAI,CAAC,oBAAoB,CAAC;QACrC,CAAC;aAND,UAA4B,cAAsB;YAC9C,IAAI,CAAC,oBAAoB,GAAG,cAAc,CAAC;QAC/C,CAAC;;;OAAA;IAWe,iDAAiB,GAAjC;;;;;;wBACU,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;wBAC7D,IAAI,qBAAqB,CAAC,oBAAoB,KAAK,IAAI;4BACnD,IAAI,CAAC,cAAc;4BACnB,IAAI,KAAK,aAAa,EAAE;4BACxB,sBAAO;yBACV;wBAED,IAAI,CAAC,CAAC,qBAAqB,CAAC,aAAa,EAAE;4BACvC,IAAI;gCACA,qBAAqB,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;gCACnD,6BAA6B;6BAChC;4BAAC,WAAM,GAAG;yBACd;wBAE+B,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;wBAAtD,UAAU,GAAgB,SAA4B;wBAC5D,qBAAM,UAAU,CAAC,IAAI,CAAC,IAAI,0DAAuB,CAC7C,qBAAW,CAAC,IAAI,EAChB,WAAW,EACX,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,kBAAkB,EAClB,aAAa,CAAC,CAAC,EAAA;;wBALnB,SAKmB,CAAC;;;;;KACvB;IAUD,uBAAuB;IACP,sDAAsB,GAAtC,UACI,kBAAsC,EACtC,SAAgC,EAChC,KAAa;;;;;6BAET,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAvC,wBAAuC;wBACvC,qBAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,EAAA;;wBAAjD,SAAiD,CAAC;wBAElD,IAAI,CAAC,iBAAiB,CAClB,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,kBAAkB,EAClB,SAAS,EACT,KAAK,CAAC,CAAC;;;;;;KAElB;IAIe,8CAAc,GAA9B;;;;;;;wBAEQ,IAAI,IAAI,CAAC,cAAc,EAAE;4BACrB,cAAc;4BACd,sBAAO;yBACV;wBAEgB,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;wBAAzC,UAAU,GAAG,SAA4B;wBAC7B,qBAAM,UAAU,CAAC,IAAI,EAAE,EAAA;;wBAAjC,OAAO,GAAG,SAAuB;wBAEvC,IAAI,IAAI,CAAC,sBAAsB,KAAK,SAAS,EAAE;4BAC3C,sBAAO,IAAI,CAAC,sBAAsB,EAAE,EAAC;yBACxC;wBAED,mEAAmE;wBACnE,IAAI,CAAC,OAAO,EAAE;4BACV,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE;gCACxC,sBAAO;6BACV;iCAAM;gCACH,sBAAO,IAAI,CAAC,cAAc,EAAE,EAAC;6BAChC;yBACJ;wBAED,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;wBAChC,iBAAiB,GAAG,0DAAuB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;6BAE7E,CAAA,iBAAiB,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,WAAW,EAAE,CAAA,EAA7F,yBAA6F;wBACrF,KAAA,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAA;;iCACnC,YAAY,CAAC,CAAb,wBAAY;iCAKZ,sBAAsB,CAAC,CAAvB,wBAAsB;iCAQtB,oBAAoB,CAAC,CAArB,wBAAoB;iCAoBpB,UAAU,CAAC,CAAX,wBAAU;;;;wBAhCX,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;wBACtC,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,CAAC;wBACrD,yBAAM;;wBAGA,mBAAmB,GAAmB,wBAAc,CAAC,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;wBAC1F,oBAAoB,GAAG,IAAI,8BAAoB,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;wBACrH,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE;4BAC3C,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;yBACtF;wBACD,yBAAM;;wBAGF,IAAI,SAAQ,CAAC;wBACjB,IAAI,iBAAiB,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;4BACvC,IAAI,GAAG,iBAAiB,CAAC,QAAQ,CAAC;yBACrC;6BAAM;4BACH,wDAAwD;4BACxD,IAAI,GAAG,eAAe,CAAC;yBAC1B;wBACK,kBAAkB,GAAmB,wBAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBACzE,sDAAsD;wBACtD,6GAA6G;wBAC7G,IAAI,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,EAAE;4BACnD,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC;yBAC3H;wBACK,mBAAmB,GAAG,IAAI,8BAAoB,CAAC,kBAAkB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;wBACpK,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;4BACzC,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC;yBACnF;wBACD,yBAAM;4BAGN,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;wBAA9B,SAA8B,CAAC;6BAC3B,CAAA,IAAI,CAAC,kBAAkB,CAAC,aAAa,IAAI,IAAI,CAAC,yBAAyB,CAAA,EAAvE,wBAAuE;wBACvE,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;wBACvC,qBAAM,IAAI,CAAC,sBAAsB,CAAC,4BAAkB,CAAC,WAAW,EAAE,+BAAqB,CAAC,OAAO,EAAE,SAAS,CAAC,EAAA;;wBAA3G,SAA2G,CAAC;;;wBAE1G,oBAAoB,GAAqB,IAAI,0BAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;wBACvG,qBAAM,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,EAAA;;wBAAzG,SAAyG,CAAC;6BACtG,CAAA,CAAC,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,IAAI,IAAI,CAAC,kBAAkB,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAA,EAArI,yBAAqI;wBACrI,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;4BACtC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;yBACjF;wBACD,sBAAO;6BAEM,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;wBAAzC,UAAU,GAAG,SAA4B,CAAC;wBAC1C,qBAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAA;;wBAAzC,SAAyC,CAAC;;6BAE9C,yBAAM;6BAGD,qBAAM,IAAI,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,EAAA;;wBAA9D,IAAI,CAAC,CAAA,SAAyD,CAAA,EAAE;4BAC5D,kGAAkG;4BAClG,IAAI,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE;gCAC1B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,sBAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC;6BAClH;yBACJ;;6BAGb,sBAAO,IAAI,CAAC,cAAc,EAAE,EAAC;;;wBAE7B,sBAAO,IAAI,EAAC;;;;;KAEnB;IAES,iDAAiB,GAA3B,UAA4B,UAAuB,EAAE,oBAA6B;QAC9E,IAAM,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;QACtD,IAAI,oBAAoB,EAAE;YACtB,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC;SAC7C;QAED,IAAI,iBAAiB,EAAE;YACnB,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,0DAAuB,CAC9C,qBAAW,CAAC,IAAI,EAChB,gBAAgB,EAChB,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,kBAAkB,EAClB,iBAAiB,CAAC,CAAC,CAAC;SAC3B;QACD,OAAO;IACX,CAAC;IAID,iFAAiF;IACjE,kDAAkB,GAAlC,UAAmC,UAAuB,EAAE,oBAAoC;QAApC,qCAAA,EAAA,2BAAoC;;;;;wBAC5F,IAAI,IAAI,CAAC,0BAA0B,KAAK,SAAS,EAAE;4BAC/C,sBAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,EAAC;yBACtD;wBAED,qBAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,oBAAoB,CAAC,EAAA;;wBAA9D,SAA8D,CAAC;wBAC/D,qBAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAAA;;wBAArC,SAAqC,CAAC;wBACtC,sBAAO;;;;KACV;IAEe,8CAAc,GAA9B,UAA+B,UAAuB;;;;;4BACZ,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAA;;wBAA7D,MAAM,GAA0B,SAA6B;wBACnE,4CAA4C;wBAC5C,sBAAO,UAAU,CAAC,IAAI,CAAC,IAAI,0DAAuB,CAC9C,qBAAW,CAAC,MAAM,EAClB,OAAO,EACP,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,aAAa,EACb,MAAM,CAAC,MAAM,CAChB,CAAC,EAAC;;;;KACN;IAID,uDAAuD;IAC7C,2CAAW,GAArB;QAAA,iBA8BC;QA7BG,IAAI,IAAI,CAAC,qBAAqB,KAAK,SAAS,EAAE;YAC1C,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAC,UAAuB;gBAC3D,IAAI,UAAU,CAAC,KAAK,EAAE,KAAK,yBAAe,CAAC,YAAY,EAAE;oBACrD,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;oBAC7B,KAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;oBACvC,KAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;oBACvC,OAAO,KAAI,CAAC,WAAW,EAAE,CAAC;iBAC7B;gBACD,OAAO,KAAI,CAAC,qBAAqB,CAAC;YACtC,CAAC,EAAE;gBACC,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC7B,KAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;gBACvC,KAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;gBACvC,OAAO,KAAI,CAAC,WAAW,EAAE,CAAC;YAC9B,CAAC,CAAC,CAAC;SACN;QAED,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAErD,8EAA8E;QAC9E,+DAA+D;QAC/D,gEAAgE;QAChE,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;QAElD,IAAI,IAAI,CAAC,uBAAuB,KAAK,SAAS,EAAE;YAC5C,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;SACnE;QAED,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACtC,CAAC;IAIS,uDAAuB,GAAjC,UAAkC,UAAuB,EAAE,cAA8B,EAAE,uBAA+B;QACtH,cAAc,CAAC,eAAe,EAAE,CAAC;QACjC,oEAAoE;QACpE,IAAI,qBAAqB,CAAC,oBAAoB,KAAK,IAAI,EAAE;YACrD,IAAM,aAAa,GAAoC,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAoC,CAAC;YAE9H,IAAM,WAAW,GAAQ;gBACrB,OAAO,EAAE;oBACL,MAAM,EAAE,aAAa,CAAC,OAAO,CAAC,MAAM;iBACvC;aACJ,CAAC;YAEF,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;SACzD;QAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,sCAAsC,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,EAAE;YAC5H,IAAM,IAAI,GAAsE,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAsE,CAAC;YACzL,IAAI,CAAC,OAAO,CAAC,uBAAuB,GAAG,MAAM,CAAC;YAC9C,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;YAC/B,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SAClD;QAED,IAAI,uBAAuB,EAAE;YACzB,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,0DAAuB,CAC9C,qBAAW,CAAC,IAAI,EAChB,eAAe,EACf,cAAc,CAAC,SAAS,EACxB,kBAAkB,EAClB,uBAAuB,CAAC,CAAC,CAAC;SACjC;QAED,OAAO;IACX,CAAC;IAEe,+CAAe,GAA/B;;;;;;wBACI,IAAI,IAAI,CAAC,kCAAkC,KAAK,SAAS,EAAE;4BACvD,sBAAO,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,UAAC,UAAuB;oCACxE,IAAI,UAAU,CAAC,KAAK,EAAE,KAAK,yBAAe,CAAC,YAAY,EAAE;wCACrD,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;wCAC7B,KAAI,CAAC,kCAAkC,GAAG,SAAS,CAAC;wCACpD,KAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;wCACvC,OAAO,KAAI,CAAC,eAAe,EAAE,CAAC;qCACjC;oCACD,OAAO,KAAI,CAAC,kCAAkC,CAAC;gCACnD,CAAC,EAAE;oCACC,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;oCAC7B,KAAI,CAAC,kCAAkC,GAAG,SAAS,CAAC;oCACpD,KAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;oCACvC,OAAO,KAAI,CAAC,eAAe,EAAE,CAAC;gCAClC,CAAC,CAAC,EAAC;yBACN;wBAED,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;wBAC9D,qBAAM,IAAI,CAAC,kCAAkC,EAAA;4BAApD,sBAAO,SAA6C,EAAC;;;;KACxD;IAEe,yCAAS,GAAzB,UAA0B,eAAiC;;;;;;4BACZ,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAA;;wBAAlE,WAAW,GAA0B,SAA6B;wBAGpE,YAAY,GAAW,IAAI,CAAC,GAAG,EAAE,CAAC;wBAGhC,cAAc,GAAW,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,sCAAsC,EAAE,MAAM,CAAC,CAAC;wBAC1H,uBAAuB,GAAW,WAAW,CAAC,cAAc,GAAG,IAAI,GAAG,QAAQ,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;wBACnG,gBAAgB,GAAW,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC;wBAE/D,kBAAkB,GAAG;;;;;;6CAEnB,CAAA,CAAC,IAAI,CAAC,cAAc;4CACpB,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa;4CACtC,IAAI,CAAC,kBAAkB,CAAC,aAAa;4CACrC,IAAI,CAAC,kBAAkB,CAAC,WAAW,KAAK,gBAAgB,CAAA,EAHxD,wBAGwD;wCAExB,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;wCAAtD,UAAU,GAAgB,SAA4B;wCACR,qBAAM,eAAe,CAAC,IAAI,EAAE,EAAA;;wCAA1E,gBAAgB,GAA8B,SAA4B;wCAChF,uCAAuC;wCACvC,IAAI,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE;4CACvC,yEAAyE;4CACzE,sBAAO;yCACV;wCAEG,OAAO,SAAa,CAAC;wCACrB,SAAS,SAAQ,CAAC;wCAEtB,IAAI,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,KAAK,EAAE;4CAC7C,OAAO,GAAG,IAAI,CAAC;4CACf,SAAS,GAAG,CAAC,CAAC;yCACjB;6CAAM;4CACH,OAAO,GAAG,gBAAgB,CAAC,MAAM,CAAC;4CAElC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;4CAExD,IAAI,uBAAuB,IAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE;gDAC9D,SAAS,GAAG,CAAC,CAAC;6CACjB;iDAAM;gDACH,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;6CACtD;yCACJ;6CAEG,CAAA,CAAC,KAAK,SAAS,CAAA,EAAf,wBAAe;wCACf,qBAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAA;;wCAA3B,SAA2B,CAAC;;;wCAGhC,IAAI,OAAO,KAAK,IAAI,EAAE;4CAClB,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;yCAC9F;wCAED,sBAAsB;wCACtB,IAAI,CAAC,IAAI,CAAC,cAAc;4CACpB,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa;4CACtC,IAAI,CAAC,kBAAkB,CAAC,aAAa;4CACrC,IAAI,CAAC,kBAAkB,CAAC,WAAW,KAAK,gBAAgB,EAAE;4CAC1D,UAAU,CAAC,IAAI,CACX,IAAI,0DAAuB,CAAC,qBAAW,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAC7G,CAAC,KAAK,CAAC;gDACJ,gEAAgE;gDAChE,KAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,KAAI,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;4CAC/H,CAAC,CAAC,CAAC;4CAEH,IAAI,EAAC,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,KAAK,CAAA,EAAE;gDAC1B,sCAAsC;gDACtC,8DAA8D;gDAC9D,+DAA+D;gDAC/D,oEAAoE;gDACpE,sBAAO,kBAAkB,EAAE,EAAC;6CAC/B;iDAAM;gDACH,6DAA6D;gDAC7D,qBAAqB;gDACrB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;oDACvB,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;iDAC3C;6CACJ;yCACJ;;;;;6BAER,CAAC;wBAEF,sBAAO,kBAAkB,EAAE,EAAC;;;;KAC/B;IAEa,gDAAgB,GAA9B;;;;;;;wBACQ,cAAc,GAAY,KAAK,CAAC;wBAEpC,IAAI,CAAC,oBAAoB,GAAG,0BAAgB,EAAE,CAAC;wBACzC,SAAS,GAAW,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC;wBAC5D,IAAI,CAAC,gBAAgB,GAAG,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,0BAAgB,EAAE,CAAC;wBAEnF,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;wBAC3F,cAAc,GAAW,CAAC,CAAC;wBAC3B,UAAU,GAAW,EAAE,CAAC;;;6BAErB,CAAA,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,IAAI,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAA;wBAIrF,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;wBAC1I,qBAAM,WAAW,EAAA;;wBAAlC,IAAI,GAAa,SAAiB;wBAExC,qBAAM,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,EAAA;;wBAApD,SAAoD,CAAC;wBAG/C,UAAU,GAAgB,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;wBAC1H,iCAAiC;wBACjC,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;wBAErE,qHAAqH;wBACrH,6BAA6B;wBAC7B,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,KAAsB;4BAC5C,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;wBACzC,CAAC,CAAC,CAAC;wBAEsC,qBAAM,UAAU,CAAC,IAAI,EAAE,EAAA;;wBAA1D,QAAQ,GAA2B,SAAuB;6BAE5D,CAAA,QAAQ,CAAC,UAAU,KAAK,GAAG,CAAA,EAA3B,wBAA2B;wBAC3B,qBAAM,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAA;;wBAAjF,SAAiF,CAAC;wBAClF,sBAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAC;;wBAChC,IAAI,QAAQ,CAAC,UAAU,KAAK,IAAI,EAAE;4BACrC,cAAc,GAAG,IAAI,CAAC;yBACzB;;;wBAED,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC;wBACrC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBAE7B,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;;4BAGhD,qBAAM,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,cAAc,EAAE,UAAU,CAAC,EAAA;;wBAAxF,SAAwF,CAAC;wBACzF,sBAAO,OAAO,CAAC,MAAM,CAAC,2CAAyC,cAAc,UAAK,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,gCAAgC,CAAC,iBAAY,UAAY,CAAC,EAAC;;;;KAC5M;IAEO,qCAAK,GAAb,UAAc,OAAe;QAA7B,iBAEC;QADG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAmB,IAAa,OAAA,KAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,EAArC,CAAqC,CAAC,CAAC;IAC/F,CAAC;IAEO,oDAAoB,GAA5B,UAA6B,MAAmB;QAC5C,IAAI,GAAG,GAAW,eAAe,CAAC;QAClC,IAAI,IAAI,KAAK,MAAM,EAAE;YACjB,GAAG,IAAI,MAAM,CAAC;SACjB;aAAM;YACH,IAAM,QAAQ,GAAe,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;YACpD,GAAG,IAAO,MAAM,CAAC,UAAU,SAAM,CAAC;YAClC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;gBAChD,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;gBACvD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE;oBACtB,sCAAsC;oBACtC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAClB,GAAG,GAAG,EAAE,CAAC;iBACZ;aACJ;SACJ;QACD,sCAAsC;QACtC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAEa,8CAAc,GAA5B;;;;;4BACoC,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;wBAAtD,UAAU,GAAgB,SAA4B;wBAC5D,qBAAM,UAAU,CAAC,IAAI,CAAC,IAAI,0DAAuB,CAAC,qBAAW,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,EAAA;;wBAA9H,SAA8H,CAAC;wBAC/H,sBAAO;;;;KACV;IAED,wGAAwG;IAC1F,mDAAmB,GAAjC;;;;;4BACoC,qBAAM,IAAI,CAAC,WAAW,EAAE,EAAA;;wBAAlD,UAAU,GAAgB,SAAwB;wBACxD,IAAI,IAAI,CAAC,wBAAwB,KAAK,SAAS,EAAE;4BAC7C,sBAAO,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,EAAC;yBACpD;wBACD,qBAAM,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAC,EAAA;;wBAAlI,SAAkI,CAAC;wBACnI,qBAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,KAAK,CAAC,EAAA;;wBAAhD,SAAgD,CAAC;wBACjD,sBAAO,UAAU,EAAC;;;;KACrB;IAnea,0CAAoB,GAAY,IAAI,CAAC;IAoevD,4BAAC;CAlvBD,AAkvBC,IAAA;AAlvBqB,sDAAqB","file":"ServiceRecognizerBase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = this.authentication;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privRequestSession.isRecognizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        // Only shrink the buffers for continuous recognition.\r\n                        // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                        if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                            this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                        }\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n"]}},"error":null,"hash":"519b3265c9be02bbf6fdb914d0d548f0","cacheData":{"env":{}}}