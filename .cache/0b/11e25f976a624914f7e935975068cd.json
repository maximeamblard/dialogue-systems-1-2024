{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionMessage.Internal.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionMessage.Internal.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../common/Exports","loc":{"line":19,"column":24,"index":825},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionMessage.Internal.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js"},{"name":"./HeaderNames","loc":{"line":20,"column":28,"index":875},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionMessage.Internal.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/HeaderNames.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpeechConnectionMessage = void 0;\nvar Exports_1 = require(\"../common/Exports\");\nvar HeaderNames_1 = require(\"./HeaderNames\");\nvar SpeechConnectionMessage = /** @class */ (function (_super) {\n    __extends(SpeechConnectionMessage, _super);\n    function SpeechConnectionMessage(messageType, path, requestId, contentType, body, streamId, additionalHeaders, id) {\n        var _this = this;\n        if (!path) {\n            throw new Exports_1.ArgumentNullError(\"path\");\n        }\n        if (!requestId) {\n            throw new Exports_1.ArgumentNullError(\"requestId\");\n        }\n        var headers = {};\n        headers[HeaderNames_1.HeaderNames.Path] = path;\n        headers[HeaderNames_1.HeaderNames.RequestId] = requestId;\n        headers[HeaderNames_1.HeaderNames.RequestTimestamp] = new Date().toISOString();\n        if (contentType) {\n            headers[HeaderNames_1.HeaderNames.ContentType] = contentType;\n        }\n        if (streamId) {\n            headers[HeaderNames_1.HeaderNames.RequestStreamId] = streamId;\n        }\n        if (additionalHeaders) {\n            for (var headerName in additionalHeaders) {\n                if (headerName) {\n                    headers[headerName] = additionalHeaders[headerName];\n                }\n            }\n        }\n        if (id) {\n            _this = _super.call(this, messageType, body, headers, id) || this;\n        }\n        else {\n            _this = _super.call(this, messageType, body, headers) || this;\n        }\n        _this.privPath = path;\n        _this.privRequestId = requestId;\n        _this.privContentType = contentType;\n        _this.privStreamId = streamId;\n        _this.privAdditionalHeaders = additionalHeaders;\n        return _this;\n    }\n    Object.defineProperty(SpeechConnectionMessage.prototype, \"path\", {\n        get: function () {\n            return this.privPath;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SpeechConnectionMessage.prototype, \"requestId\", {\n        get: function () {\n            return this.privRequestId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SpeechConnectionMessage.prototype, \"contentType\", {\n        get: function () {\n            return this.privContentType;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SpeechConnectionMessage.prototype, \"streamId\", {\n        get: function () {\n            return this.privStreamId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SpeechConnectionMessage.prototype, \"additionalHeaders\", {\n        get: function () {\n            return this.privAdditionalHeaders;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SpeechConnectionMessage.fromConnectionMessage = function (message) {\n        var path = null;\n        var requestId = null;\n        var contentType = null;\n        // let requestTimestamp = null;\n        var streamId = null;\n        var additionalHeaders = {};\n        if (message.headers) {\n            for (var headerName in message.headers) {\n                if (headerName) {\n                    if (headerName.toLowerCase() === HeaderNames_1.HeaderNames.Path.toLowerCase()) {\n                        path = message.headers[headerName];\n                    }\n                    else if (headerName.toLowerCase() === HeaderNames_1.HeaderNames.RequestId.toLowerCase()) {\n                        requestId = message.headers[headerName];\n                        // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\n                        //  requestTimestamp = message.headers[headerName];\n                    }\n                    else if (headerName.toLowerCase() === HeaderNames_1.HeaderNames.ContentType.toLowerCase()) {\n                        contentType = message.headers[headerName];\n                    }\n                    else if (headerName.toLowerCase() === HeaderNames_1.HeaderNames.RequestStreamId.toLowerCase()) {\n                        streamId = message.headers[headerName];\n                    }\n                    else {\n                        additionalHeaders[headerName] = message.headers[headerName];\n                    }\n                }\n            }\n        }\n        return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, streamId, additionalHeaders, message.id);\n    };\n    return SpeechConnectionMessage;\n}(Exports_1.ConnectionMessage));\nexports.SpeechConnectionMessage = SpeechConnectionMessage;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/common.speech/SpeechConnectionMessage.Internal.ts"],"names":[],"mappings":"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","file":"SpeechConnectionMessage.Internal.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n"]}},"error":null,"hash":"763caa8b28efc99b26be30401ad24e50","cacheData":{"env":{}}}