{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslator.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslator.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../../common.speech/Exports","loc":{"line":57,"column":24,"index":3411},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslator.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js"},{"name":"../../common/Exports","loc":{"line":58,"column":24,"index":3467},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslator.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js"},{"name":"../Contracts","loc":{"line":59,"column":26,"index":3518},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslator.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js"},{"name":"../Exports","loc":{"line":60,"column":24,"index":3559},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslator.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"},{"name":"./Conversation","loc":{"line":61,"column":29,"index":3603},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslator.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/Conversation.js"},{"name":"./Exports","loc":{"line":62,"column":24,"index":3646},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/ConversationTranslator.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/Exports.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConversationTranslator = exports.SpeechState = void 0;\n/* eslint-disable max-classes-per-file */\nvar Exports_1 = require(\"../../common.speech/Exports\");\nvar Exports_2 = require(\"../../common/Exports\");\nvar Contracts_1 = require(\"../Contracts\");\nvar Exports_3 = require(\"../Exports\");\nvar Conversation_1 = require(\"./Conversation\");\nvar Exports_4 = require(\"./Exports\");\nvar SpeechState;\n(function (SpeechState) {\n    SpeechState[SpeechState[\"Inactive\"] = 0] = \"Inactive\";\n    SpeechState[SpeechState[\"Connecting\"] = 1] = \"Connecting\";\n    SpeechState[SpeechState[\"Connected\"] = 2] = \"Connected\";\n})(SpeechState = exports.SpeechState || (exports.SpeechState = {}));\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\nvar ConversationTranslationRecognizer = /** @class */ (function (_super) {\n    __extends(ConversationTranslationRecognizer, _super);\n    function ConversationTranslationRecognizer(speechConfig, audioConfig, translator) {\n        var _this = _super.call(this, speechConfig, audioConfig) || this;\n        _this.privSpeechState = SpeechState.Inactive;\n        if (!!translator) {\n            _this.privTranslator = translator;\n            _this.sessionStarted = function () {\n                _this.privSpeechState = SpeechState.Connected;\n            };\n            _this.sessionStopped = function () {\n                _this.privSpeechState = SpeechState.Inactive;\n            };\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            _this.recognized = function (tr, e) { return __awaiter(_this, void 0, void 0, function () {\n                var _a;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            if (!((_a = e.result) === null || _a === void 0 ? void 0 : _a.errorDetails)) return [3 /*break*/, 2];\n                            return [4 /*yield*/, this.cancelSpeech()];\n                        case 1:\n                            _b.sent();\n                            // TODO: format the error message contained in 'errorDetails'\n                            this.fireCancelEvent(e.result.errorDetails);\n                            _b.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            }); };\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            _this.canceled = function () { return __awaiter(_this, void 0, void 0, function () {\n                var error_1;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!(this.privSpeechState !== SpeechState.Inactive)) return [3 /*break*/, 4];\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, this.cancelSpeech()];\n                        case 2:\n                            _a.sent();\n                            return [3 /*break*/, 4];\n                        case 3:\n                            error_1 = _a.sent();\n                            this.privSpeechState = SpeechState.Inactive;\n                            return [3 /*break*/, 4];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            }); };\n        }\n        return _this;\n    }\n    Object.defineProperty(ConversationTranslationRecognizer.prototype, \"state\", {\n        get: function () {\n            return this.privSpeechState;\n        },\n        set: function (newState) {\n            this.privSpeechState = newState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ConversationTranslationRecognizer.prototype.onConnection = function () {\n        this.privSpeechState = SpeechState.Connected;\n    };\n    ConversationTranslationRecognizer.prototype.onDisconnection = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.privSpeechState = SpeechState.Inactive;\n                        return [4 /*yield*/, this.cancelSpeech()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Fire a cancel event\n     * @param error\n     */\n    ConversationTranslationRecognizer.prototype.fireCancelEvent = function (error) {\n        try {\n            if (!!this.privTranslator.canceled) {\n                var cancelEvent = new Exports_4.ConversationTranslationCanceledEventArgs(Exports_3.CancellationReason.Error, error, Exports_3.CancellationErrorCode.RuntimeError);\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\n            }\n        }\n        catch (e) {\n            //\n        }\n    };\n    ConversationTranslationRecognizer.prototype.cancelSpeech = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var e_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 2, , 3]);\n                        this.stopContinuousRecognitionAsync();\n                        return [4 /*yield*/, ((_a = this.privReco) === null || _a === void 0 ? void 0 : _a.disconnect())];\n                    case 1:\n                        _b.sent();\n                        this.privSpeechState = SpeechState.Inactive;\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_1 = _b.sent();\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ConversationTranslationRecognizer;\n}(Exports_3.TranslationRecognizer));\n/**\n * Join, leave or connect to a conversation.\n */\nvar ConversationTranslator = /** @class */ (function (_super) {\n    __extends(ConversationTranslator, _super);\n    function ConversationTranslator(audioConfig) {\n        var _this = _super.call(this, audioConfig) || this;\n        _this.privErrors = Exports_1.ConversationConnectionConfig.restErrors;\n        _this.privIsDisposed = false;\n        _this.privIsSpeaking = false;\n        _this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\n        _this.privPlaceholderRegion = \"westus\";\n        _this.privProperties = new Exports_3.PropertyCollection();\n        return _this;\n    }\n    Object.defineProperty(ConversationTranslator.prototype, \"properties\", {\n        get: function () {\n            return this.privProperties;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ConversationTranslator.prototype, \"speechRecognitionLanguage\", {\n        get: function () {\n            return this.privSpeechRecognitionLanguage;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ConversationTranslator.prototype, \"participants\", {\n        get: function () {\n            var _a;\n            return (_a = this.privConversation) === null || _a === void 0 ? void 0 : _a.participants;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ConversationTranslator.prototype, \"canSpeak\", {\n        get: function () {\n            // is there a Conversation websocket available and has the Recognizer been set up\n            if (!this.privConversation.isConnected || !this.privCTRecognizer) {\n                return false;\n            }\n            // is the user already speaking\n            if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\n                return false;\n            }\n            // is the user muted\n            if (this.privConversation.isMutedByHost) {\n                return false;\n            }\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ConversationTranslator.prototype.joinConversationAsync = function (conversation, nickname, param1, param2, param3) {\n        var _this = this;\n        try {\n            if (typeof conversation === \"string\") {\n                Contracts_1.Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n                Contracts_1.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n                if (!!this.privConversation) {\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\n                }\n                var lang = param1;\n                if (lang === undefined || lang === null || lang === \"\") {\n                    lang = Exports_1.ConversationConnectionConfig.defaultLanguageCode;\n                }\n                // create a placeholder config\n                this.privSpeechTranslationConfig = Exports_3.SpeechTranslationConfig.fromSubscription(this.privPlaceholderKey, this.privPlaceholderRegion);\n                this.privSpeechTranslationConfig.setProfanity(Exports_3.ProfanityOption.Masked);\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\n                this.privSpeechTranslationConfig.setProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage], lang);\n                this.privSpeechTranslationConfig.setProperty(Exports_3.PropertyId[Exports_3.PropertyId.ConversationTranslator_Name], nickname);\n                var endpoint = this.privProperties.getProperty(Exports_3.PropertyId.ConversationTranslator_Host);\n                if (endpoint) {\n                    this.privSpeechTranslationConfig.setProperty(Exports_3.PropertyId[Exports_3.PropertyId.ConversationTranslator_Host], endpoint);\n                }\n                var speechEndpointHost = this.privProperties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Host);\n                if (speechEndpointHost) {\n                    this.privSpeechTranslationConfig.setProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\n                }\n                // join the conversation\n                this.privConversation = new Conversation_1.ConversationImpl(this.privSpeechTranslationConfig);\n                this.privConversation.conversationTranslator = this;\n                this.privConversation.joinConversationAsync(conversation, nickname, lang, (function (result) {\n                    if (!result) {\n                        _this.handleError(new Error(_this.privErrors.permissionDeniedConnect), param3);\n                    }\n                    _this.privSpeechTranslationConfig.authorizationToken = result;\n                    // connect to the ws\n                    _this.privConversation.startConversationAsync((function () {\n                        _this.handleCallback(param2, param3);\n                    }), (function (error) {\n                        _this.handleError(error, param3);\n                    }));\n                }), (function (error) {\n                    _this.handleError(error, param3);\n                }));\n            }\n            else if (typeof conversation === \"object\") {\n                Contracts_1.Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n                Contracts_1.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n                // save the nickname\n                this.privProperties.setProperty(Exports_3.PropertyId.ConversationTranslator_Name, nickname);\n                // ref the conversation object\n                this.privConversation = conversation;\n                // ref the conversation translator object\n                this.privConversation.conversationTranslator = this;\n                Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\n                Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n                this.privSpeechTranslationConfig = conversation.config;\n                this.handleCallback(param1, param2);\n            }\n            else {\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")), param2);\n            }\n        }\n        catch (error) {\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\n        }\n    };\n    /**\n     * Leave the conversation\n     * @param cb\n     * @param err\n     */\n    ConversationTranslator.prototype.leaveConversationAsync = function (cb, err) {\n        var _this = this;\n        Exports_2.marshalPromiseToCallbacks((function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // stop the speech websocket\n                    return [4 /*yield*/, this.cancelSpeech()];\n                    case 1:\n                        // stop the speech websocket\n                        _a.sent();\n                        // stop the websocket\n                        return [4 /*yield*/, this.privConversation.endConversationImplAsync()];\n                    case 2:\n                        // stop the websocket\n                        _a.sent();\n                        // https delete request\n                        return [4 /*yield*/, this.privConversation.deleteConversationImplAsync()];\n                    case 3:\n                        // https delete request\n                        _a.sent();\n                        this.dispose();\n                        return [2 /*return*/];\n                }\n            });\n        }); })(), cb, err);\n    };\n    /**\n     * Send a text message\n     * @param message\n     * @param cb\n     * @param err\n     */\n    ConversationTranslator.prototype.sendTextMessageAsync = function (message, cb, err) {\n        try {\n            Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n            Contracts_1.Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\n            this.privConversation.sendTextMessageAsync(message, cb, err);\n        }\n        catch (error) {\n            this.handleError(error, err);\n        }\n    };\n    /**\n     * Start speaking\n     * @param cb\n     * @param err\n     */\n    ConversationTranslator.prototype.startTranscribingAsync = function (cb, err) {\n        var _this = this;\n        Exports_2.marshalPromiseToCallbacks((function () { return __awaiter(_this, void 0, void 0, function () {\n            var error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 4, , 6]);\n                        Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n                        Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n                        if (!(this.privCTRecognizer === undefined)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.connectTranslatorRecognizer()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        Contracts_1.Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\n                        if (!this.canSpeak) {\n                            this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n                        }\n                        return [4 /*yield*/, this.startContinuousRecognition()];\n                    case 3:\n                        _a.sent();\n                        this.privIsSpeaking = true;\n                        return [3 /*break*/, 6];\n                    case 4:\n                        error_2 = _a.sent();\n                        this.privIsSpeaking = false;\n                        return [4 /*yield*/, this.cancelSpeech()];\n                    case 5:\n                        _a.sent();\n                        throw error_2;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        }); })(), cb, err);\n    };\n    /**\n     * Stop speaking\n     * @param cb\n     * @param err\n     */\n    ConversationTranslator.prototype.stopTranscribingAsync = function (cb, err) {\n        var _this = this;\n        Exports_2.marshalPromiseToCallbacks((function () { return __awaiter(_this, void 0, void 0, function () {\n            var error_3;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 4, , 6]);\n                        if (!!this.privIsSpeaking) return [3 /*break*/, 2];\n                        // stop speech\n                        return [4 /*yield*/, this.cancelSpeech()];\n                    case 1:\n                        // stop speech\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 2:\n                        // stop the recognition but leave the websocket open\n                        this.privIsSpeaking = false;\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                _this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\n                            })];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 4:\n                        error_3 = _a.sent();\n                        return [4 /*yield*/, this.cancelSpeech()];\n                    case 5:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        }); })(), cb, err);\n    };\n    ConversationTranslator.prototype.isDisposed = function () {\n        return this.privIsDisposed;\n    };\n    ConversationTranslator.prototype.dispose = function (reason, success, err) {\n        var _this = this;\n        Exports_2.marshalPromiseToCallbacks((function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isDisposed && !this.privIsSpeaking) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this.cancelSpeech()];\n                    case 1:\n                        _a.sent();\n                        this.privIsDisposed = true;\n                        this.privSpeechTranslationConfig.close();\n                        this.privSpeechRecognitionLanguage = undefined;\n                        this.privProperties = undefined;\n                        this.privAudioConfig = undefined;\n                        this.privSpeechTranslationConfig = undefined;\n                        this.privConversation.dispose();\n                        this.privConversation = undefined;\n                        return [2 /*return*/];\n                }\n            });\n        }); })(), success, err);\n    };\n    /**\n     * Cancel the speech websocket\n     */\n    ConversationTranslator.prototype.cancelSpeech = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var e_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 2, , 3]);\n                        this.privIsSpeaking = false;\n                        return [4 /*yield*/, ((_a = this.privCTRecognizer) === null || _a === void 0 ? void 0 : _a.onDisconnection())];\n                    case 1:\n                        _b.sent();\n                        this.privCTRecognizer = undefined;\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_2 = _b.sent();\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Connect to the speech translation recognizer.\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\n     */\n    ConversationTranslator.prototype.connectTranslatorRecognizer = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var token, endpointHost, url, error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 1, , 3]);\n                        if (this.privAudioConfig === undefined) {\n                            this.privAudioConfig = Exports_3.AudioConfig.fromDefaultMicrophoneInput();\n                        }\n                        // clear the temp subscription key if it's a participant joining\n                        if (this.privSpeechTranslationConfig.getProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_Key])\n                            === this.privPlaceholderKey) {\n                            this.privSpeechTranslationConfig.setProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_Key], \"\");\n                        }\n                        token = encodeURIComponent(this.privConversation.room.token);\n                        endpointHost = this.privSpeechTranslationConfig.getProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_Host], Exports_1.ConversationConnectionConfig.speechHost);\n                        endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\n                        url = \"wss://\" + endpointHost + Exports_1.ConversationConnectionConfig.speechPath + \"?\" + Exports_1.ConversationConnectionConfig.configParams.token + \"=\" + token;\n                        this.privSpeechTranslationConfig.setProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_Endpoint], url);\n                        this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this);\n                        return [3 /*break*/, 3];\n                    case 1:\n                        error_4 = _a.sent();\n                        return [4 /*yield*/, this.cancelSpeech()];\n                    case 2:\n                        _a.sent();\n                        throw error_4;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Handle the start speaking request\n     */\n    ConversationTranslator.prototype.startContinuousRecognition = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\n        });\n    };\n    return ConversationTranslator;\n}(Exports_4.ConversationCommon));\nexports.ConversationTranslator = ConversationTranslator;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/sdk/Transcription/ConversationTranslator.ts"],"names":[],"mappings":"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","file":"ConversationTranslator.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports\";\r\nimport { ConversationImpl } from \"./Conversation\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, translator?: ConversationTranslator) {\r\n        super(speechConfig, audioConfig);\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // TODO: add support for getting recognitions from here if own speech\r\n\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onDisconnection(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | { config: SpeechTranslationConfig }, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const endpoint: string = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\r\n                if (endpoint) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\r\n                }\r\n                const speechEndpointHost: string = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\r\n                if (speechEndpointHost) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onDisconnection();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            // TODO\r\n            const token: string = encodeURIComponent(this.privConversation.room.token);\r\n\r\n            let endpointHost: string = this.privSpeechTranslationConfig.getProperty(\r\n                PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\r\n            endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\r\n\r\n            const url = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\r\n\r\n            this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\r\n\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n"]}},"error":null,"hash":"fbaf7e42f1657b6757eeb3ddc1f11c5e","cacheData":{"env":{}}}