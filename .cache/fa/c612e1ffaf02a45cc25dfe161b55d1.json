{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CustomCommandsConfig.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CustomCommandsConfig.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"./Contracts","loc":{"line":19,"column":26,"index":824},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CustomCommandsConfig.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js"},{"name":"./DialogServiceConfig","loc":{"line":20,"column":36,"index":876},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CustomCommandsConfig.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/DialogServiceConfig.js"},{"name":"./Exports","loc":{"line":21,"column":24,"index":926},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CustomCommandsConfig.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomCommandsConfig = void 0;\nvar Contracts_1 = require(\"./Contracts\");\nvar DialogServiceConfig_1 = require(\"./DialogServiceConfig\");\nvar Exports_1 = require(\"./Exports\");\n/**\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\n * @class CustomCommandsConfig\n */\nvar CustomCommandsConfig = /** @class */ (function (_super) {\n    __extends(CustomCommandsConfig, _super);\n    /**\n     * Creates an instance of CustomCommandsConfig.\n     */\n    function CustomCommandsConfig() {\n        return _super.call(this) || this;\n    }\n    /**\n     * Creates an instance of the bot framework config with the specified subscription and region.\n     * @member CustomCommandsConfig.fromSubscription\n     * @function\n     * @public\n     * @param applicationId Speech Commands application id.\n     * @param subscription Subscription key associated with the bot\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {CustomCommandsConfig} A new bot framework config.\n     */\n    CustomCommandsConfig.fromSubscription = function (applicationId, subscription, region) {\n        Contracts_1.Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n        Contracts_1.Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n        Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n        var customCommandsConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n        customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, DialogServiceConfig_1.DialogServiceConfig.DialogTypes.CustomCommands);\n        customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, applicationId);\n        customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Key, subscription);\n        customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n        return customCommandsConfig;\n    };\n    /**\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n     * @member CustomCommandsConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param applicationId Speech Commands application id.\n     * @param authorizationToken The authorization token associated with the application.\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {CustomCommandsConfig} A new speech commands config.\n     */\n    CustomCommandsConfig.fromAuthorizationToken = function (applicationId, authorizationToken, region) {\n        Contracts_1.Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n        Contracts_1.Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n        Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n        var customCommandsConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n        customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, DialogServiceConfig_1.DialogServiceConfig.DialogTypes.CustomCommands);\n        customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, applicationId);\n        customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n        customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n        return customCommandsConfig;\n    };\n    Object.defineProperty(CustomCommandsConfig.prototype, \"applicationId\", {\n        /**\n         * Gets the corresponding backend application identifier.\n         * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n         * @function\n         * @public\n         * @param {string} value - The application identifier to get.\n         */\n        get: function () {\n            return this.getProperty(Exports_1.PropertyId.Conversation_ApplicationId);\n        },\n        /**\n         * Sets the corresponding backend application identifier.\n         * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n         * @function\n         * @public\n         * @param {string} value - The application identifier to set.\n         */\n        set: function (value) {\n            Contracts_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n            this.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return CustomCommandsConfig;\n}(DialogServiceConfig_1.DialogServiceConfigImpl));\nexports.CustomCommandsConfig = CustomCommandsConfig;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/sdk/CustomCommandsConfig.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;AAElC,yCAAwC;AACxC,6DAAqF;AACrF,qCAAuC;AAEvC;;;GAGG;AACH;IAA0C,wCAAuB;IAE7D;;OAEG;IACH;eACI,iBAAO;IACX,CAAC;IAED;;;;;;;;;OASG;IACW,qCAAgB,GAA9B,UAA+B,aAAqB,EAAE,YAAoB,EAAE,MAAc;QACtF,qBAAS,CAAC,uBAAuB,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;QAClE,qBAAS,CAAC,uBAAuB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QAChE,qBAAS,CAAC,uBAAuB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpD,IAAM,oBAAoB,GAAyB,IAAI,6CAAuB,EAAE,CAAC;QACjF,oBAAoB,CAAC,WAAW,CAAC,oBAAU,CAAC,uBAAuB,EAAE,yCAAmB,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACrH,oBAAoB,CAAC,WAAW,CAAC,oBAAU,CAAC,0BAA0B,EAAE,aAAa,CAAC,CAAC;QACvF,oBAAoB,CAAC,WAAW,CAAC,oBAAU,CAAC,2BAA2B,EAAE,YAAY,CAAC,CAAC;QACvF,oBAAoB,CAAC,WAAW,CAAC,oBAAU,CAAC,8BAA8B,EAAE,MAAM,CAAC,CAAC;QACpF,OAAO,oBAAoB,CAAC;IAChC,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACW,2CAAsB,GAApC,UAAqC,aAAqB,EAAE,kBAA0B,EAAE,MAAc;QAClG,qBAAS,CAAC,uBAAuB,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;QAClE,qBAAS,CAAC,uBAAuB,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;QAC5E,qBAAS,CAAC,uBAAuB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpD,IAAM,oBAAoB,GAAyB,IAAI,6CAAuB,EAAE,CAAC;QACjF,oBAAoB,CAAC,WAAW,CAAC,oBAAU,CAAC,uBAAuB,EAAE,yCAAmB,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACrH,oBAAoB,CAAC,WAAW,CAAC,oBAAU,CAAC,0BAA0B,EAAE,aAAa,CAAC,CAAC;QACvF,oBAAoB,CAAC,WAAW,CAAC,oBAAU,CAAC,gCAAgC,EAAE,kBAAkB,CAAC,CAAC;QAClG,oBAAoB,CAAC,WAAW,CAAC,oBAAU,CAAC,8BAA8B,EAAE,MAAM,CAAC,CAAC;QACpF,OAAO,oBAAoB,CAAC;IAChC,CAAC;IASD,sBAAW,+CAAa;QAKxB;;;;;;WAMG;aACH;YACI,OAAO,IAAI,CAAC,WAAW,CAAC,oBAAU,CAAC,0BAA0B,CAAC,CAAC;QACnE,CAAC;QArBD;;;;;;WAMG;aACH,UAAyB,KAAa;YAClC,qBAAS,CAAC,uBAAuB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAClD,IAAI,CAAC,WAAW,CAAC,oBAAU,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC;;;OAAA;IAYL,2BAAC;AAAD,CAlFA,AAkFC,CAlFyC,6CAAuB,GAkFhE;AAlFY,oDAAoB","file":"CustomCommandsConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n"]}},"error":null,"hash":"8f1954540a245f0dc3b72a488aa06b36","cacheData":{"env":{}}}