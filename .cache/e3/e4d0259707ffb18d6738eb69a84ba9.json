{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../common.browser/Exports","loc":{"line":19,"column":24,"index":830},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js"},{"name":"../sdk/Exports","loc":{"line":20,"column":24,"index":884},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"},{"name":"./ConnectionFactoryBase","loc":{"line":21,"column":38,"index":941},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ConnectionFactoryBase.js"},{"name":"./Exports","loc":{"line":22,"column":24,"index":993},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js"},{"name":"./HeaderNames","loc":{"line":23,"column":28,"index":1035},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/HeaderNames.js"},{"name":"./QueryParameterNames","loc":{"line":24,"column":36,"index":1089},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/QueryParameterNames.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TranslationConnectionFactory = void 0;\nvar Exports_1 = require(\"../common.browser/Exports\");\nvar Exports_2 = require(\"../sdk/Exports\");\nvar ConnectionFactoryBase_1 = require(\"./ConnectionFactoryBase\");\nvar Exports_3 = require(\"./Exports\");\nvar HeaderNames_1 = require(\"./HeaderNames\");\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\nvar TranslationConnectionFactory = /** @class */ (function (_super) {\n    __extends(TranslationConnectionFactory, _super);\n    function TranslationConnectionFactory() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TranslationConnectionFactory.prototype.create = function (config, authInfo, connectionId) {\n        var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        if (!endpoint) {\n            var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, undefined);\n            var hostSuffix = ConnectionFactoryBase_1.ConnectionFactoryBase.getHostSuffix(region);\n            var host = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\n            endpoint = host + \"/speech/translation/cognitiveservices/v1\";\n        }\n        var queryParams = {\n            from: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage),\n            to: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages),\n        };\n        this.setCommonUrlParams(config, queryParams, endpoint);\n        this.setUrlParameter(Exports_2.PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult, QueryParameterNames_1.QueryParameterNames.StableTranslation, config, queryParams, endpoint);\n        var voiceName = \"voice\";\n        var featureName = \"features\";\n        if (config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n            queryParams[voiceName] = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice);\n            queryParams[featureName] = \"texttospeech\";\n        }\n        var headers = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames_1.HeaderNames.ConnectionId] = connectionId;\n        config.parameters.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Url, endpoint);\n        var enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_3.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n    return TranslationConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase));\nexports.TranslationConnectionFactory = TranslationConnectionFactory;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/common.speech/TranslationConnectionFactory.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;AAElC,qDAGmC;AAKnC,0CAEwB;AACxB,iEAEiC;AACjC,qCAImB;AACnB,6CAA4C;AAC5C,6DAA4D;AAE5D;IAAkD,gDAAqB;IAAvE;;IAgDA,CAAC;IA9CU,6CAAM,GAAb,UACI,MAAwB,EACxB,QAAkB,EAClB,YAAqB;QAErB,IAAI,QAAQ,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,gCAAgC,EAAE,SAAS,CAAC,CAAC;QAC7G,IAAI,CAAC,QAAQ,EAAE;YACX,IAAM,MAAM,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,8BAA8B,EAAE,SAAS,CAAC,CAAC;YAC3G,IAAM,UAAU,GAAW,6CAAqB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACvE,IAAM,IAAI,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,4BAA4B,EAAE,QAAQ,GAAG,MAAM,GAAG,aAAa,GAAG,UAAU,CAAC,CAAC;YAC5I,QAAQ,GAAG,IAAI,GAAG,0CAA0C,CAAC;SAChE;QAED,IAAM,WAAW,GAA8B;YAC3C,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,oCAAoC,CAAC;YACpF,EAAE,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,8CAA8C,CAAC;SAC/F,CAAC;QAEF,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACvD,IAAI,CAAC,eAAe,CAChB,oBAAU,CAAC,2DAA2D,EACtE,yCAAmB,CAAC,iBAAiB,EACrC,MAAM,EACN,WAAW,EACX,QAAQ,CACX,CAAC;QAEF,IAAM,SAAS,GAAW,OAAO,CAAC;QAClC,IAAM,WAAW,GAAW,UAAU,CAAC;QAEvC,IAAI,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,wCAAwC,EAAE,SAAS,CAAC,KAAK,SAAS,EAAE;YAC7G,WAAW,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,wCAAwC,CAAC,CAAC;YAC5G,WAAW,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC;SAC7C;QAED,IAAM,OAAO,GAA8B,EAAE,CAAC;QAC9C,IAAI,QAAQ,CAAC,KAAK,KAAK,SAAS,IAAI,QAAQ,CAAC,KAAK,KAAK,EAAE,EAAE;YACvD,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;SACjD;QACD,OAAO,CAAC,yBAAW,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;QAEjD,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,2BAA2B,EAAE,QAAQ,CAAC,CAAC;QAEhF,IAAM,iBAAiB,GAAY,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,mCAAmC,EAAE,OAAO,CAAC,KAAK,MAAM,CAAC;QAC1H,OAAO,IAAI,6BAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,mCAAyB,EAAE,EAAE,mBAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;IAC7K,CAAC;IACL,mCAAC;AAAD,CAhDA,AAgDC,CAhDiD,6CAAqB,GAgDtE;AAhDY,oEAA4B","file":"TranslationConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/translation/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpoint\r\n        );\r\n\r\n        const voiceName: string = \"voice\";\r\n        const featureName: string = \"features\";\r\n\r\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\r\n            queryParams[featureName] = \"texttospeech\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]}},"error":null,"hash":"a7d3a81bb9a39b25dd13b59d2a2041d2","cacheData":{"env":{}}}