{"id":"../node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js.map","includedInParent":true,"mtime":1733074798686},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/web-speech-cognitive-services/package.json","includedInParent":true,"mtime":1733074798686},{"name":"@babel/runtime/helpers/interopRequireDefault","loc":{"line":3,"column":37,"index":52},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/web-speech-cognitive-services/node_modules/@babel/runtime/helpers/interopRequireDefault.js"},{"name":"../../Util/arrayToMap","loc":{"line":10,"column":49,"index":245},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/web-speech-cognitive-services/lib/Util/arrayToMap.js"},{"name":"../SpeechSDK","loc":{"line":12,"column":48,"index":321},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechSDK.js"}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _arrayToMap = _interopRequireDefault(require(\"../../Util/arrayToMap\"));\n\nvar _SpeechSDK = _interopRequireDefault(require(\"../SpeechSDK\"));\n\nvar _SpeechSDK$ResultReas = _SpeechSDK.default.ResultReason,\n    RecognizingSpeech = _SpeechSDK$ResultReas.RecognizingSpeech,\n    RecognizedSpeech = _SpeechSDK$ResultReas.RecognizedSpeech;\n\nfunction _default(result) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$maxAlternatives = _ref.maxAlternatives,\n      maxAlternatives = _ref$maxAlternatives === void 0 ? Infinity : _ref$maxAlternatives,\n      _ref$textNormalizatio = _ref.textNormalization,\n      textNormalization = _ref$textNormalizatio === void 0 ? 'display' : _ref$textNormalizatio;\n\n  if (result.reason === RecognizingSpeech || result.reason === RecognizedSpeech && !result.json.NBest) {\n    var resultList = [{\n      confidence: 0.5,\n      transcript: result.text\n    }];\n\n    if (result.reason === RecognizedSpeech) {\n      resultList.isFinal = true;\n    }\n\n    return resultList;\n  } else if (result.reason === RecognizedSpeech) {\n    var _resultList = (0, _arrayToMap.default)((result.json.NBest || []).slice(0, maxAlternatives).map(function (_ref2) {\n      var confidence = _ref2.Confidence,\n          display = _ref2.Display,\n          itn = _ref2.ITN,\n          lexical = _ref2.Lexical,\n          maskedITN = _ref2.MaskedITN;\n      return {\n        confidence: confidence,\n        transcript: textNormalization === 'itn' ? itn : textNormalization === 'lexical' ? lexical : textNormalization === 'maskeditn' ? maskedITN : display\n      };\n    }), {\n      isFinal: true\n    });\n\n    return _resultList;\n  }\n\n  return [];\n}\n"},"sourceMaps":{"js":{"version":3,"file":"cognitiveServiceEventResultToWebSpeechRecognitionResultList.js","names":["SpeechSDK","ResultReason","RecognizingSpeech","RecognizedSpeech","result","maxAlternatives","Infinity","textNormalization","reason","json","NBest","resultList","confidence","transcript","text","isFinal","arrayToMap","slice","map","Confidence","display","Display","itn","ITN","lexical","Lexical","maskedITN","MaskedITN"],"sources":["../../../src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js"],"sourcesContent":["import arrayToMap from '../../Util/arrayToMap';\nimport SpeechSDK from '../SpeechSDK';\n\nconst {\n  ResultReason: { RecognizingSpeech, RecognizedSpeech }\n} = SpeechSDK;\n\nexport default function(result, { maxAlternatives = Infinity, textNormalization = 'display' } = {}) {\n  if (result.reason === RecognizingSpeech || (result.reason === RecognizedSpeech && !result.json.NBest)) {\n    const resultList = [\n      {\n        confidence: 0.5,\n        transcript: result.text\n      }\n    ];\n\n    if (result.reason === RecognizedSpeech) {\n      resultList.isFinal = true;\n    }\n\n    return resultList;\n  } else if (result.reason === RecognizedSpeech) {\n    const resultList = arrayToMap(\n      (result.json.NBest || [])\n        .slice(0, maxAlternatives)\n        .map(({ Confidence: confidence, Display: display, ITN: itn, Lexical: lexical, MaskedITN: maskedITN }) => ({\n          confidence,\n          transcript:\n            textNormalization === 'itn'\n              ? itn\n              : textNormalization === 'lexical'\n              ? lexical\n              : textNormalization === 'maskeditn'\n              ? maskedITN\n              : display\n        })),\n      { isFinal: true }\n    );\n\n    return resultList;\n  }\n\n  return [];\n}\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,4BAEIA,kBAFJ,CACEC,YADF;AAAA,IACkBC,iBADlB,yBACkBA,iBADlB;AAAA,IACqCC,gBADrC,yBACqCA,gBADrC;;AAIe,kBAASC,MAAT,EAAqF;EAAA,+EAAJ,EAAI;EAAA,gCAAlEC,eAAkE;EAAA,IAAlEA,eAAkE,qCAAhDC,QAAgD;EAAA,iCAAtCC,iBAAsC;EAAA,IAAtCA,iBAAsC,sCAAlB,SAAkB;;EAClG,IAAIH,MAAM,CAACI,MAAP,KAAkBN,iBAAlB,IAAwCE,MAAM,CAACI,MAAP,KAAkBL,gBAAlB,IAAsC,CAACC,MAAM,CAACK,IAAP,CAAYC,KAA/F,EAAuG;IACrG,IAAMC,UAAU,GAAG,CACjB;MACEC,UAAU,EAAE,GADd;MAEEC,UAAU,EAAET,MAAM,CAACU;IAFrB,CADiB,CAAnB;;IAOA,IAAIV,MAAM,CAACI,MAAP,KAAkBL,gBAAtB,EAAwC;MACtCQ,UAAU,CAACI,OAAX,GAAqB,IAArB;IACD;;IAED,OAAOJ,UAAP;EACD,CAbD,MAaO,IAAIP,MAAM,CAACI,MAAP,KAAkBL,gBAAtB,EAAwC;IAC7C,IAAMQ,WAAU,GAAG,IAAAK,mBAAA,EACjB,CAACZ,MAAM,CAACK,IAAP,CAAYC,KAAZ,IAAqB,EAAtB,EACGO,KADH,CACS,CADT,EACYZ,eADZ,EAEGa,GAFH,CAEO;MAAA,IAAeN,UAAf,SAAGO,UAAH;MAAA,IAAoCC,OAApC,SAA2BC,OAA3B;MAAA,IAAkDC,GAAlD,SAA6CC,GAA7C;MAAA,IAAgEC,OAAhE,SAAuDC,OAAvD;MAAA,IAAoFC,SAApF,SAAyEC,SAAzE;MAAA,OAAqG;QACxGf,UAAU,EAAVA,UADwG;QAExGC,UAAU,EACRN,iBAAiB,KAAK,KAAtB,GACIe,GADJ,GAEIf,iBAAiB,KAAK,SAAtB,GACAiB,OADA,GAEAjB,iBAAiB,KAAK,WAAtB,GACAmB,SADA,GAEAN;MATkG,CAArG;IAAA,CAFP,CADiB,EAcjB;MAAEL,OAAO,EAAE;IAAX,CAdiB,CAAnB;;IAiBA,OAAOJ,WAAP;EACD;;EAED,OAAO,EAAP;AACD"}},"error":null,"hash":"5f59e69a39f196b2a8e38141c09435c2","cacheData":{"env":{}}}