{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeakerRecognizer.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeakerRecognizer.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../common.speech/Exports","loc":{"line":42,"column":24,"index":2705},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeakerRecognizer.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js"},{"name":"./Contracts","loc":{"line":43,"column":26,"index":2760},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeakerRecognizer.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js"},{"name":"./Exports","loc":{"line":44,"column":24,"index":2800},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeakerRecognizer.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpeakerRecognizer = void 0;\nvar Exports_1 = require(\"../common.speech/Exports\");\nvar Contracts_1 = require(\"./Contracts\");\nvar Exports_2 = require(\"./Exports\");\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\nvar SpeakerRecognizer = /** @class */ (function () {\n    /**\n     * SpeakerRecognizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\n     */\n    function SpeakerRecognizer(speechConfig, audioConfig) {\n        var speechConfigImpl = speechConfig;\n        Contracts_1.Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n        this.privAudioConfigImpl = audioConfig;\n        Contracts_1.Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n        this.privProperties = speechConfigImpl.properties.clone();\n        this.implSRSetup();\n    }\n    Object.defineProperty(SpeakerRecognizer.prototype, \"authorizationToken\", {\n        /**\n         * Gets the authorization token used to communicate with the service.\n         * @member SpeakerRecognizer.prototype.authorizationToken\n         * @function\n         * @public\n         * @returns {string} Authorization token.\n         */\n        get: function () {\n            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);\n        },\n        /**\n         * Gets/Sets the authorization token used to communicate with the service.\n         * @member SpeakerRecognizer.prototype.authorizationToken\n         * @function\n         * @public\n         * @param {string} token - Authorization token.\n         */\n        set: function (token) {\n            Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n            this.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, token);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SpeakerRecognizer.prototype, \"properties\", {\n        /**\n         * The collection of properties and their values defined for this SpeakerRecognizer.\n         * @member SpeakerRecognizer.prototype.properties\n         * @function\n         * @public\n         * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n         */\n        get: function () {\n            return this.privProperties;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get recognition result for model using given audio\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @async\n     * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\n     * @param cb - Callback invoked once result is returned.\n     * @param err - Callback invoked in case of an error.\n     */\n    SpeakerRecognizer.prototype.recognizeOnceAsync = function (model) {\n        return __awaiter(this, void 0, void 0, function () {\n            var responsePromise, responsePromise;\n            return __generator(this, function (_a) {\n                if (model instanceof Exports_2.SpeakerIdentificationModel) {\n                    responsePromise = this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl);\n                    return [2 /*return*/, this.getResult(responsePromise, Exports_2.SpeakerRecognitionResultType.Identify, undefined)];\n                }\n                else if (model instanceof Exports_2.SpeakerVerificationModel) {\n                    responsePromise = this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl);\n                    return [2 /*return*/, this.getResult(responsePromise, Exports_2.SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId)];\n                }\n                else {\n                    throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Included for compatibility\n     * @member SpeakerRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    SpeakerRecognizer.prototype.close = function () {\n        return;\n    };\n    // Does class setup, swiped from Recognizer.\n    SpeakerRecognizer.prototype.implSRSetup = function () {\n        var osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\n        var osName = \"unknown\";\n        var osVersion = \"unknown\";\n        if (typeof navigator !== \"undefined\") {\n            osPlatform = osPlatform + \"/\" + navigator.platform;\n            osName = navigator.userAgent;\n            osVersion = navigator.appVersion;\n        }\n        var recognizerConfig = new Exports_1.SpeakerRecognitionConfig(new Exports_1.Context(new Exports_1.OS(osPlatform, osName, osVersion)), this.privProperties);\n        this.privAdapter = new Exports_1.SpeakerIdMessageAdapter(recognizerConfig);\n    };\n    SpeakerRecognizer.prototype.getResult = function (responsePromise, resultType, profileId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, responsePromise];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, new Exports_2.SpeakerRecognitionResult(resultType, response.data, profileId, response.ok ? Exports_2.ResultReason.RecognizedSpeaker : Exports_2.ResultReason.Canceled)];\n                }\n            });\n        });\n    };\n    return SpeakerRecognizer;\n}());\nexports.SpeakerRecognizer = SpeakerRecognizer;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/sdk/SpeakerRecognizer.ts"],"names":[],"mappings":"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","file":"SpeakerRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognitionResultType,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * SpeakerRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implSRSetup();\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n\r\n        if (model instanceof SpeakerIdentificationModel) {\r\n            const responsePromise: Promise<IRestResponse> = this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl);\r\n            return this.getResult(responsePromise, SpeakerRecognitionResultType.Identify, undefined);\r\n        } else if (model instanceof SpeakerVerificationModel) {\r\n            const responsePromise: Promise<IRestResponse> = this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl);\r\n            return this.getResult(responsePromise, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId);\r\n        } else {\r\n            throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    private implSRSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private async getResult(responsePromise: Promise<IRestResponse>, resultType: SpeakerRecognitionResultType, profileId?: string): Promise<SpeakerRecognitionResult> {\r\n        const response: IRestResponse = await responsePromise;\r\n        return new SpeakerRecognitionResult(\r\n            resultType,\r\n            response.data,\r\n            profileId,\r\n            response.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled,\r\n        );\r\n    }\r\n}\r\n"]}},"error":null,"hash":"6522f2675e03130bac13bb350ec15679","cacheData":{"env":{}}}