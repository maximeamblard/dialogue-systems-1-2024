{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/EnumTranslation.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/EnumTranslation.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../sdk/Exports","loc":{"line":6,"column":24,"index":231},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/EnumTranslation.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"},{"name":"./Exports","loc":{"line":7,"column":24,"index":274},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/EnumTranslation.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnumTranslation = void 0;\nvar Exports_1 = require(\"../sdk/Exports\");\nvar Exports_2 = require(\"./Exports\");\nvar EnumTranslation = /** @class */ (function () {\n    function EnumTranslation() {\n    }\n    EnumTranslation.implTranslateRecognitionResult = function (recognitionStatus) {\n        var reason = Exports_1.ResultReason.Canceled;\n        switch (recognitionStatus) {\n            case Exports_2.RecognitionStatus.Success:\n                reason = Exports_1.ResultReason.RecognizedSpeech;\n                break;\n            case Exports_2.RecognitionStatus.NoMatch:\n            case Exports_2.RecognitionStatus.InitialSilenceTimeout:\n            case Exports_2.RecognitionStatus.BabbleTimeout:\n            case Exports_2.RecognitionStatus.EndOfDictation:\n                reason = Exports_1.ResultReason.NoMatch;\n                break;\n            case Exports_2.RecognitionStatus.Error:\n            case Exports_2.RecognitionStatus.BadRequest:\n            case Exports_2.RecognitionStatus.Forbidden:\n            default:\n                reason = Exports_1.ResultReason.Canceled;\n                break;\n        }\n        return reason;\n    };\n    EnumTranslation.implTranslateCancelResult = function (recognitionStatus) {\n        var reason = Exports_1.CancellationReason.EndOfStream;\n        switch (recognitionStatus) {\n            case Exports_2.RecognitionStatus.Success:\n            case Exports_2.RecognitionStatus.EndOfDictation:\n            case Exports_2.RecognitionStatus.NoMatch:\n                reason = Exports_1.CancellationReason.EndOfStream;\n                break;\n            case Exports_2.RecognitionStatus.InitialSilenceTimeout:\n            case Exports_2.RecognitionStatus.BabbleTimeout:\n            case Exports_2.RecognitionStatus.Error:\n            case Exports_2.RecognitionStatus.BadRequest:\n            case Exports_2.RecognitionStatus.Forbidden:\n            default:\n                reason = Exports_1.CancellationReason.Error;\n                break;\n        }\n        return reason;\n    };\n    EnumTranslation.implTranslateCancelErrorCode = function (recognitionStatus) {\n        var reason = Exports_1.CancellationErrorCode.NoError;\n        switch (recognitionStatus) {\n            case Exports_2.RecognitionStatus.Error:\n                reason = Exports_1.CancellationErrorCode.ServiceError;\n                break;\n            case Exports_2.RecognitionStatus.TooManyRequests:\n                reason = Exports_1.CancellationErrorCode.TooManyRequests;\n                break;\n            case Exports_2.RecognitionStatus.BadRequest:\n                reason = Exports_1.CancellationErrorCode.BadRequestParameters;\n                break;\n            case Exports_2.RecognitionStatus.Forbidden:\n                reason = Exports_1.CancellationErrorCode.Forbidden;\n                break;\n            default:\n                reason = Exports_1.CancellationErrorCode.NoError;\n                break;\n        }\n        return reason;\n    };\n    EnumTranslation.implTranslateErrorDetails = function (cancellationErrorCode) {\n        var errorDetails = \"The speech service encountered an internal error and could not continue.\";\n        switch (cancellationErrorCode) {\n            case Exports_1.CancellationErrorCode.Forbidden:\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\n                break;\n            case Exports_1.CancellationErrorCode.BadRequestParameters:\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\n                break;\n            case Exports_1.CancellationErrorCode.TooManyRequests:\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\n                break;\n            default:\n                break;\n        }\n        return errorDetails;\n    };\n    return EnumTranslation;\n}());\nexports.EnumTranslation = EnumTranslation;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/common.speech/EnumTranslation.ts"],"names":[],"mappings":"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","file":"EnumTranslation.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports\";\r\nimport { RecognitionStatus } from \"./Exports\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.EndOfDictation:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n"]}},"error":null,"hash":"7e98a0faa85893ba5399373377f193a1","cacheData":{"env":{}}}