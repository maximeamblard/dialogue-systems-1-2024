{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionMessage.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionMessage.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../common.speech/HeaderNames","loc":{"line":9,"column":28,"index":382},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionMessage.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/HeaderNames.js"},{"name":"../common/Exports","loc":{"line":10,"column":24,"index":439},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionMessage.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js"},{"name":"./PropertyCollection","loc":{"line":11,"column":35,"index":496},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionMessage.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyCollection.js"},{"name":"./PropertyId","loc":{"line":12,"column":27,"index":548},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionMessage.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyId.js"}],"generated":{"js":"\"use strict\";\n//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionMessageImpl = exports.ConnectionMessage = void 0;\n// eslint-disable-next-line max-classes-per-file\nvar HeaderNames_1 = require(\"../common.speech/HeaderNames\");\nvar Exports_1 = require(\"../common/Exports\");\nvar PropertyCollection_1 = require(\"./PropertyCollection\");\nvar PropertyId_1 = require(\"./PropertyId\");\n/**\n * ConnectionMessage represents implementation specific messages sent to and received from\n * the speech service. These messages are provided for debugging purposes and should not\n * be used for production use cases with the Azure Cognitive Services Speech Service.\n * Messages sent to and received from the Speech Service are subject to change without\n * notice. This includes message contents, headers, payloads, ordering, etc.\n * Added in version 1.11.0.\n */\nvar ConnectionMessage = /** @class */ (function () {\n    function ConnectionMessage() {\n    }\n    return ConnectionMessage;\n}());\nexports.ConnectionMessage = ConnectionMessage;\nvar ConnectionMessageImpl = /** @class */ (function () {\n    function ConnectionMessageImpl(message) {\n        var _this = this;\n        this.privConnectionMessage = message;\n        this.privProperties = new PropertyCollection_1.PropertyCollection();\n        if (!!this.privConnectionMessage.headers[HeaderNames_1.HeaderNames.ConnectionId]) {\n            this.privProperties.setProperty(PropertyId_1.PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames_1.HeaderNames.ConnectionId]);\n        }\n        Object.keys(this.privConnectionMessage.headers).forEach(function (header) {\n            _this.privProperties.setProperty(header, _this.privConnectionMessage.headers[header]);\n        });\n    }\n    Object.defineProperty(ConnectionMessageImpl.prototype, \"path\", {\n        /**\n         * The message path.\n         */\n        get: function () {\n            return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find(function (key) { return key.toLowerCase() === \"path\".toLowerCase(); })];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ConnectionMessageImpl.prototype, \"isTextMessage\", {\n        /**\n         * Checks to see if the ConnectionMessage is a text message.\n         * See also IsBinaryMessage().\n         */\n        get: function () {\n            return this.privConnectionMessage.messageType === Exports_1.MessageType.Text;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ConnectionMessageImpl.prototype, \"isBinaryMessage\", {\n        /**\n         * Checks to see if the ConnectionMessage is a binary message.\n         * See also GetBinaryMessage().\n         */\n        get: function () {\n            return this.privConnectionMessage.messageType === Exports_1.MessageType.Binary;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ConnectionMessageImpl.prototype, \"TextMessage\", {\n        /**\n         * Gets the text message payload. Typically the text message content-type is\n         * application/json. To determine other content-types use\n         * Properties.GetProperty(\"Content-Type\").\n         */\n        get: function () {\n            return this.privConnectionMessage.textBody;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ConnectionMessageImpl.prototype, \"binaryMessage\", {\n        /**\n         * Gets the binary message payload.\n         */\n        get: function () {\n            return this.privConnectionMessage.binaryBody;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ConnectionMessageImpl.prototype, \"properties\", {\n        /**\n         * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n         * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n         */\n        get: function () {\n            return this.privProperties;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a string that represents the connection message.\n     */\n    ConnectionMessageImpl.prototype.toString = function () {\n        return \"\";\n    };\n    return ConnectionMessageImpl;\n}());\nexports.ConnectionMessageImpl = ConnectionMessageImpl;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/sdk/ConnectionMessage.ts"],"names":[],"mappings":";AAAA,EAAE;AACF,gDAAgD;AAChD,wGAAwG;AACxG,EAAE;;;AAEF,gDAAgD;AAChD,4DAA2D;AAC3D,6CAG2B;AAC3B,2DAE8B;AAC9B,2CAA0C;AAE1C;;;;;;;GAOG;AACH;IAAA;IAwCA,CAAC;IAAD,wBAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCqB,8CAAiB;AA0CvC;IAKI,+BAAmB,OAA6B;QAAhD,iBAUC;QATG,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,IAAI,uCAAkB,EAAE,CAAC;QAC/C,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,yBAAW,CAAC,YAAY,CAAC,EAAE;YAChE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,uBAAU,CAAC,gBAAgB,EAAE,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,yBAAW,CAAC,YAAY,CAAC,CAAC,CAAC;SAC9H;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,MAAc;YACnE,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,EAAE,KAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;IACP,CAAC;IAKD,sBAAW,uCAAI;QAHf;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,GAAW,IAAc,OAAA,GAAG,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,WAAW,EAAE,EAA1C,CAA0C,CAAC,CAAC,CAAC;QAC1K,CAAC;;;OAAA;IAMD,sBAAW,gDAAa;QAJxB;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,KAAK,qBAAW,CAAC,IAAI,CAAC;QACvE,CAAC;;;OAAA;IAMD,sBAAW,kDAAe;QAJ1B;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,KAAK,qBAAW,CAAC,MAAM,CAAC;QACzE,CAAC;;;OAAA;IAOD,sBAAW,8CAAW;QALtB;;;;WAIG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC;QAC/C,CAAC;;;OAAA;IAKD,sBAAW,gDAAa;QAHxB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC;QACjD,CAAC;;;OAAA;IAMD,sBAAW,6CAAU;QAJrB;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;;;OAAA;IAED;;OAEG;IACI,wCAAQ,GAAf;QACI,OAAO,EAAE,CAAC;IACd,CAAC;IACL,4BAAC;AAAD,CAtEA,AAsEC,IAAA;AAtEY,sDAAqB","file":"ConnectionMessage.js","sourcesContent":["//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection\";\r\nimport { PropertyId } from \"./PropertyId\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n"]}},"error":null,"hash":"86f2c77241a3f94934cfd21ce490e03c","cacheData":{"env":{}}}