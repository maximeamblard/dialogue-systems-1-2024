{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationServiceRecognizer.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationServiceRecognizer.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../common/Exports","loc":{"line":55,"column":24,"index":3302},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationServiceRecognizer.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js"},{"name":"../sdk/Exports","loc":{"line":56,"column":24,"index":3348},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationServiceRecognizer.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"},{"name":"./Exports","loc":{"line":57,"column":24,"index":3391},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationServiceRecognizer.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TranslationServiceRecognizer = void 0;\nvar Exports_1 = require(\"../common/Exports\");\nvar Exports_2 = require(\"../sdk/Exports\");\nvar Exports_3 = require(\"./Exports\");\n// eslint-disable-next-line max-classes-per-file\nvar TranslationServiceRecognizer = /** @class */ (function (_super) {\n    __extends(TranslationServiceRecognizer, _super);\n    function TranslationServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) {\n        var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) || this;\n        _this.privTranslationRecognizer = translationRecognizer;\n        _this.connectionEvents.attach(function (connectionEvent) {\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\n                _this.privTranslationRecognizer.onConnection();\n            }\n            else if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                void _this.privTranslationRecognizer.onDisconnection();\n            }\n        });\n        return _this;\n    }\n    TranslationServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resultProps, processed, handleTranslationPhrase, _a, result, phrase, synthEnd, result_1, retEvent, canceledResult;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        resultProps = new Exports_2.PropertyCollection();\n                        processed = false;\n                        handleTranslationPhrase = function (translatedPhrase) { return __awaiter(_this, void 0, void 0, function () {\n                            var result, reason, result, cancelReason, cancellationErrorCode, ev;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\n                                        if (!(translatedPhrase.RecognitionStatus === Exports_3.RecognitionStatus.Success)) return [3 /*break*/, 1];\n                                        result = this.fireEventForResult(translatedPhrase, resultProps);\n                                        if (!!this.privTranslationRecognizer.recognized) {\n                                            try {\n                                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\n                                                /* eslint-disable no-empty */\n                                            }\n                                            catch (error) {\n                                                // Not going to let errors in the event handler\n                                                // trip things up.\n                                            }\n                                        }\n                                        // report result to promise.\n                                        if (!!this.privSuccessCallback) {\n                                            try {\n                                                this.privSuccessCallback(result.result);\n                                            }\n                                            catch (e) {\n                                                if (!!this.privErrorCallback) {\n                                                    this.privErrorCallback(e);\n                                                }\n                                            }\n                                            // Only invoke the call back once.\n                                            // and if it's successful don't invoke the\n                                            // error after that.\n                                            this.privSuccessCallback = undefined;\n                                            this.privErrorCallback = undefined;\n                                        }\n                                        return [3 /*break*/, 5];\n                                    case 1:\n                                        reason = Exports_3.EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\n                                        result = new Exports_2.TranslationRecognitionResult(undefined, this.privRequestSession.requestId, reason, translatedPhrase.Text, translatedPhrase.Duration, this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset, undefined, connectionMessage.textBody, resultProps);\n                                        if (!(reason === Exports_2.ResultReason.Canceled)) return [3 /*break*/, 3];\n                                        cancelReason = Exports_3.EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\n                                        cancellationErrorCode = Exports_3.EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\n                                        return [4 /*yield*/, this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, Exports_3.EnumTranslation.implTranslateErrorDetails(cancellationErrorCode))];\n                                    case 2:\n                                        _a.sent();\n                                        return [3 /*break*/, 4];\n                                    case 3:\n                                        if (!(this.privRequestSession.isSpeechEnded && reason === Exports_2.ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== Exports_3.RecognitionStatus.InitialSilenceTimeout)) {\n                                            ev = new Exports_2.TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n                                            if (!!this.privTranslationRecognizer.recognized) {\n                                                try {\n                                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n                                                    /* eslint-disable no-empty */\n                                                }\n                                                catch (error) {\n                                                    // Not going to let errors in the event handler\n                                                    // trip things up.\n                                                }\n                                            }\n                                        }\n                                        // report result to promise.\n                                        if (!!this.privSuccessCallback) {\n                                            try {\n                                                this.privSuccessCallback(result);\n                                            }\n                                            catch (e) {\n                                                if (!!this.privErrorCallback) {\n                                                    this.privErrorCallback(e);\n                                                }\n                                            }\n                                            // Only invoke the call back once.\n                                            // and if it's successful don't invoke the\n                                            // error after that.\n                                            this.privSuccessCallback = undefined;\n                                            this.privErrorCallback = undefined;\n                                        }\n                                        _a.label = 4;\n                                    case 4:\n                                        processed = true;\n                                        _a.label = 5;\n                                    case 5: return [2 /*return*/];\n                                }\n                            });\n                        }); };\n                        if (connectionMessage.messageType === Exports_1.MessageType.Text) {\n                            resultProps.setProperty(Exports_2.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n                        }\n                        _a = connectionMessage.path.toLowerCase();\n                        switch (_a) {\n                            case \"translation.hypothesis\": return [3 /*break*/, 1];\n                            case \"translation.response\": return [3 /*break*/, 2];\n                            case \"translation.phrase\": return [3 /*break*/, 5];\n                            case \"translation.synthesis\": return [3 /*break*/, 7];\n                            case \"translation.synthesis.end\": return [3 /*break*/, 8];\n                        }\n                        return [3 /*break*/, 9];\n                    case 1:\n                        result = this.fireEventForResult(Exports_3.TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\n                        this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\n                        if (!!this.privTranslationRecognizer.recognizing) {\n                            try {\n                                this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\n                                /* eslint-disable no-empty */\n                            }\n                            catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                        processed = true;\n                        return [3 /*break*/, 10];\n                    case 2:\n                        phrase = JSON.parse(connectionMessage.textBody);\n                        if (!!!phrase.SpeechPhrase) return [3 /*break*/, 4];\n                        return [4 /*yield*/, handleTranslationPhrase(Exports_3.TranslationPhrase.fromTranslationResponse(phrase))];\n                    case 3:\n                        _b.sent();\n                        _b.label = 4;\n                    case 4: return [3 /*break*/, 10];\n                    case 5: return [4 /*yield*/, handleTranslationPhrase(Exports_3.TranslationPhrase.fromJSON(connectionMessage.textBody))];\n                    case 6:\n                        _b.sent();\n                        return [3 /*break*/, 10];\n                    case 7:\n                        this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\n                        processed = true;\n                        return [3 /*break*/, 10];\n                    case 8:\n                        synthEnd = Exports_3.TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\n                        switch (synthEnd.SynthesisStatus) {\n                            case Exports_3.SynthesisStatus.Error:\n                                if (!!this.privTranslationRecognizer.synthesizing) {\n                                    result_1 = new Exports_2.TranslationSynthesisResult(Exports_2.ResultReason.Canceled, undefined);\n                                    retEvent = new Exports_2.TranslationSynthesisEventArgs(result_1, this.privRequestSession.sessionId);\n                                    try {\n                                        this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                                        /* eslint-disable no-empty */\n                                    }\n                                    catch (error) {\n                                        // Not going to let errors in the event handler\n                                        // trip things up.\n                                    }\n                                }\n                                if (!!this.privTranslationRecognizer.canceled) {\n                                    canceledResult = new Exports_2.TranslationRecognitionCanceledEventArgs(this.privRequestSession.sessionId, Exports_2.CancellationReason.Error, synthEnd.FailureReason, Exports_2.CancellationErrorCode.ServiceError, null);\n                                    try {\n                                        this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\n                                        /* eslint-disable no-empty */\n                                    }\n                                    catch (error) {\n                                        // Not going to let errors in the event handler\n                                        // trip things up.\n                                    }\n                                }\n                                break;\n                            case Exports_3.SynthesisStatus.Success:\n                                this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\n                                break;\n                            default:\n                                break;\n                        }\n                        processed = true;\n                        return [3 /*break*/, 10];\n                    case 9: return [3 /*break*/, 10];\n                    case 10: return [2 /*return*/, processed];\n                }\n            });\n        });\n    };\n    // Cancels recognition.\n    TranslationServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error) {\n        var properties = new Exports_2.PropertyCollection();\n        properties.setProperty(Exports_3.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[errorCode]);\n        if (!!this.privTranslationRecognizer.canceled) {\n            var cancelEvent = new Exports_2.TranslationRecognitionCanceledEventArgs(sessionId, cancellationReason, error, errorCode, undefined);\n            try {\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\n                /* eslint-disable no-empty */\n            }\n            catch (_a) { }\n        }\n        if (!!this.privSuccessCallback) {\n            var result = new Exports_2.TranslationRecognitionResult(undefined, // Translations\n            requestId, Exports_2.ResultReason.Canceled, undefined, // Text\n            undefined, // Druation\n            undefined, // Offset\n            error, undefined, // Json\n            properties);\n            try {\n                this.privSuccessCallback(result);\n                /* eslint-disable no-empty */\n                this.privSuccessCallback = undefined;\n            }\n            catch (_b) { }\n        }\n    };\n    TranslationServiceRecognizer.prototype.fireEventForResult = function (serviceResult, properties) {\n        var translations;\n        if (undefined !== serviceResult.Translation.Translations) {\n            translations = new Exports_2.Translations();\n            for (var _i = 0, _a = serviceResult.Translation.Translations; _i < _a.length; _i++) {\n                var translation = _a[_i];\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\n            }\n        }\n        var resultReason;\n        if (serviceResult instanceof Exports_3.TranslationPhrase) {\n            if (serviceResult.Translation.TranslationStatus === Exports_1.TranslationStatus.Success) {\n                resultReason = Exports_2.ResultReason.TranslatedSpeech;\n            }\n            else {\n                resultReason = Exports_2.ResultReason.RecognizedSpeech;\n            }\n        }\n        else {\n            resultReason = Exports_2.ResultReason.TranslatingSpeech;\n        }\n        var offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n        var result = new Exports_2.TranslationRecognitionResult(translations, this.privRequestSession.requestId, resultReason, serviceResult.Text, serviceResult.Duration, offset, serviceResult.Translation.FailureReason, JSON.stringify(serviceResult), properties);\n        var ev = new Exports_2.TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n        return ev;\n    };\n    TranslationServiceRecognizer.prototype.sendSynthesisAudio = function (audio, sessionId) {\n        var reason = (undefined === audio) ? Exports_2.ResultReason.SynthesizingAudioCompleted : Exports_2.ResultReason.SynthesizingAudio;\n        var result = new Exports_2.TranslationSynthesisResult(reason, audio);\n        var retEvent = new Exports_2.TranslationSynthesisEventArgs(result, sessionId);\n        if (!!this.privTranslationRecognizer.synthesizing) {\n            try {\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                /* eslint-disable no-empty */\n            }\n            catch (error) {\n                // Not going to let errors in the event handler\n                // trip things up.\n            }\n        }\n    };\n    return TranslationServiceRecognizer;\n}(Exports_3.ServiceRecognizerBase));\nexports.TranslationServiceRecognizer = TranslationServiceRecognizer;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/common.speech/TranslationServiceRecognizer.ts"],"names":[],"mappings":"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","file":"TranslationServiceRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                void this.privTranslationRecognizer.onDisconnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = false;\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n                if (!!this.privTranslationRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n"]}},"error":null,"hash":"f909f511186f68cf98bd641767723692","cacheData":{"env":{}}}