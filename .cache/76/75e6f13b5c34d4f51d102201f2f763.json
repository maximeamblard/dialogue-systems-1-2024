{"id":"../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/AutoDetectSourceLanguageConfig.js","dependencies":[{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/AutoDetectSourceLanguageConfig.js.map","includedInParent":true,"mtime":1733074701821},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/package.json","includedInParent":true,"mtime":1733076065657},{"name":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/package.json","includedInParent":true,"mtime":1733074701821},{"name":"../common.speech/Exports","loc":{"line":6,"column":24,"index":246},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/AutoDetectSourceLanguageConfig.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js"},{"name":"./Contracts","loc":{"line":7,"column":26,"index":301},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/AutoDetectSourceLanguageConfig.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js"},{"name":"./Exports","loc":{"line":8,"column":24,"index":341},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/AutoDetectSourceLanguageConfig.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"},{"name":"./LanguageIdMode","loc":{"line":9,"column":31,"index":386},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/AutoDetectSourceLanguageConfig.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/LanguageIdMode.js"},{"name":"./LanguageIdPriority","loc":{"line":10,"column":35,"index":442},"parent":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/AutoDetectSourceLanguageConfig.js","resolved":"/Users/amblardv5/Nextcloud/2024/dialogue-systems-1-2024/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/LanguageIdPriority.js"}],"generated":{"js":"\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AutoDetectSourceLanguageConfig = void 0;\nvar Exports_1 = require(\"../common.speech/Exports\");\nvar Contracts_1 = require(\"./Contracts\");\nvar Exports_2 = require(\"./Exports\");\nvar LanguageIdMode_1 = require(\"./LanguageIdMode\");\nvar LanguageIdPriority_1 = require(\"./LanguageIdPriority\");\n/**\n * Language auto detect configuration.\n * @class AutoDetectSourceLanguageConfig\n * Added in version 1.13.0.\n */\nvar AutoDetectSourceLanguageConfig = /** @class */ (function () {\n    function AutoDetectSourceLanguageConfig() {\n        this.privProperties = new Exports_2.PropertyCollection();\n        this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Latency\");\n        this.privLanguageIdMode = LanguageIdMode_1.LanguageIdMode.AtStart;\n    }\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\n     * @function\n     * @public\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\n     */\n    AutoDetectSourceLanguageConfig.fromOpenRange = function () {\n        var config = new AutoDetectSourceLanguageConfig();\n        config.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, Exports_1.AutoDetectSourceLanguagesOpenRangeOptionName);\n        return config;\n    };\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\n     * @function\n     * @public\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\n     */\n    AutoDetectSourceLanguageConfig.fromLanguages = function (languages) {\n        Contracts_1.Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\n        var config = new AutoDetectSourceLanguageConfig();\n        config.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\n        return config;\n    };\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\n     * @function\n     * @public\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\n     */\n    AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs = function (configs) {\n        if (configs.length < 1) {\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\n        }\n        var autoConfig = new AutoDetectSourceLanguageConfig();\n        var langs = [];\n        configs.forEach(function (config) {\n            langs.push(config.language);\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\n                var customProperty = config.language + Exports_2.PropertyId.SpeechServiceConnection_EndpointId.toString();\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\n            }\n        });\n        autoConfig.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\n        return autoConfig;\n    };\n    Object.defineProperty(AutoDetectSourceLanguageConfig.prototype, \"properties\", {\n        /**\n         * @member AutoDetectSourceLanguageConfig.prototype.properties\n         * @function\n         * @public\n         * @return {PropertyCollection} Properties of the config.\n         * @summary Gets an auto detected language config properties\n         */\n        get: function () {\n            return this.privProperties;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AutoDetectSourceLanguageConfig.prototype, \"mode\", {\n        /**\n         * @member AutoDetectSourceLanguageConfig.prototype.mode\n         * @function\n         * @public\n         * @param {LanguageIdMode} mode LID mode desired.\n         * @summary Sets LID operation to desired mode\n         */\n        set: function (mode) {\n            if (mode === LanguageIdMode_1.LanguageIdMode.Continuous) {\n                this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\n                this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, \"Latency\");\n            }\n            else {\n                this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\n                this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, undefined);\n            }\n            this.privLanguageIdMode = mode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AutoDetectSourceLanguageConfig.prototype, \"priority\", {\n        /**\n         * @member AutoDetectSourceLanguageConfig.prototype.priority\n         * @function\n         * @public\n         * @param {LanguageIdPriority} priority LID priority desired.\n         * @summary Sets LID operation to desired priority\n         */\n        set: function (priority) {\n            if (priority === LanguageIdPriority_1.LanguageIdPriority.Accuracy) {\n                if (this.privLanguageIdMode !== LanguageIdMode_1.LanguageIdMode.Continuous) {\n                    // Accuracy not allowed for continuous mode\n                    this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Accuracy\");\n                }\n            }\n            else {\n                this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, \"Latency\");\n                this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Latency\");\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return AutoDetectSourceLanguageConfig;\n}());\nexports.AutoDetectSourceLanguageConfig = AutoDetectSourceLanguageConfig;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["src/sdk/AutoDetectSourceLanguageConfig.ts"],"names":[],"mappings":"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","file":"AutoDetectSourceLanguageConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode\";\r\nimport { LanguageIdPriority } from \"./LanguageIdPriority\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Latency\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, \"Latency\");\r\n        } else {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, undefined);\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.priority\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdPriority} priority LID priority desired.\r\n     * @summary Sets LID operation to desired priority\r\n     */\r\n    public set priority(priority: LanguageIdPriority) {\r\n        if (priority === LanguageIdPriority.Accuracy) {\r\n            if (this.privLanguageIdMode !== LanguageIdMode.Continuous) {\r\n                // Accuracy not allowed for continuous mode\r\n                this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Accuracy\");\r\n            }\r\n        } else {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_ContinuousLanguageIdPriority, \"Latency\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AtStartLanguageIdPriority, \"Latency\");\r\n        }\r\n    }\r\n\r\n}\r\n"]}},"error":null,"hash":"73cb02b5fb46afad3d13fc69b5d43ce1","cacheData":{"env":{}}}